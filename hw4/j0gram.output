Terminals unused in grammar

    CASE
    CONTINUE
    DEFAULT
    INSTANCEOF
    LONG
    SWITCH
    NOT_RESERVED
    TYPE_CAST
    CHAR_ERROR
    INT_ERROR
    UNKNOWN
    STRING_ERROR
    OPEN_COMMENT
    THEN
    ':'


State 23 conflicts: 1 shift/reduce
State 48 conflicts: 1 shift/reduce


Grammar

    0 $accept: ClassDecl $end

    1 ClassDecl: PUBLIC CLASS IDENTIFIER ClassBody

    2 ClassBody: '{' ClassBodyDecls '}'
    3          | '{' '}'

    4 ClassBodyDecls: ClassBodyDecl
    5               | ClassBodyDecls ClassBodyDecl

    6 ClassBodyDecl: FieldDecl
    7              | FieldDeclAssign
    8              | MethodDecl
    9              | ConstructorDecl

   10 FieldDecl: Type VarDecls ';'
   11          | PUBLIC STATIC Type VarDecls ';'

   12 FieldDeclAssign: Type VarDeclarator '=' Literal ';'
   13                | PUBLIC STATIC Type VarDeclarator '=' Literal ';'

   14 Type: INT
   15     | DOUBLE
   16     | BOOLEAN
   17     | FLOAT
   18     | STRING
   19     | CHAR
   20     | Name

   21 Name: IDENTIFIER
   22     | QualifiedName

   23 QualifiedName: IDENTIFIER '.' Name

   24 VarDecls: VarDeclarator
   25         | VarDecls ',' VarDeclarator

   26 VarDeclarator: IDENTIFIER
   27              | VarDeclarator '[' ']'

   28 MethodReturnVal: Type
   29                | VOID

   30 MethodDecl: MethodHeader Block

   31 MethodHeader: PUBLIC STATIC MethodReturnVal MethodDeclarator
   32             | PUBLIC MethodReturnVal MethodDeclarator
   33             | STATIC MethodReturnVal MethodDeclarator
   34             | MethodReturnVal MethodDeclarator

   35 MethodDeclarator: IDENTIFIER '(' FormalParmListOpt ')'

   36 FormalParmListOpt: FormalParmList
   37                  | %empty

   38 FormalParmList: FormalParm
   39               | FormalParmList ',' FormalParm

   40 FormalParm: Type VarDeclarator

   41 ConstructorDecl: ConstructorDeclarator Block

   42 ConstructorDeclarator: IDENTIFIER '(' FormalParmListOpt ')'

   43 ArgListOpt: ArgList
   44           | %empty

   45 Block: '{' BlockStmtsOpt '}'

   46 BlockStmtsOpt: BlockStmts
   47              | %empty

   48 BlockStmts: BlockStmt
   49           | BlockStmts BlockStmt

   50 BlockStmt: LocalVarDeclStmt
   51          | Stmt

   52 LocalVarDeclStmt: LocalVarDecl ';'

   53 LocalVarDecl: Type VarDecls

   54 Stmt: Block
   55     | ';'
   56     | ExprStmt
   57     | BreakStmt
   58     | ReturnStmt
   59     | IfThenStmt
   60     | IfThenElseStmt
   61     | IfThenElseIfStmt
   62     | WhileStmt
   63     | ForStmt

   64 ExprStmt: StmtExpr ';'

   65 StmtExpr: Assignment
   66         | MethodCall
   67         | InstantiationExpr

   68 IfThenStmt: IF '(' Expr ')' Block

   69 IfThenElseStmt: IF '(' Expr ')' Block ELSE Block

   70 IfThenElseIfStmt: IF '(' Expr ')' Block ElseIfSequence
   71                 | IF '(' Expr ')' Block ElseIfSequence ELSE Block

   72 ElseIfSequence: ElseIfStmt
   73               | ElseIfSequence ElseIfStmt

   74 ElseIfStmt: ELSE IfThenStmt

   75 WhileStmt: WHILE '(' Expr ')' Stmt

   76 ForStmt: FOR '(' ForInit ';' ExprOpt ';' ForUpdate ')' Block

   77 ForInit: StmtExprList
   78        | LocalVarDecl
   79        | %empty

   80 ExprOpt: Expr
   81        | %empty

   82 ForUpdate: StmtExprList
   83          | %empty

   84 StmtExprList: StmtExpr
   85             | StmtExprList ',' StmtExpr

   86 BreakStmt: BREAK ';'
   87          | BREAK IDENTIFIER ';'

   88 ReturnStmt: RETURN ExprOpt ';'

   89 Primary: Literal
   90        | '(' Expr ')'
   91        | FieldAccess
   92        | MethodCall

   93 Literal: INTEGER_LITERAL
   94        | FLOAT_LITERAL
   95        | BOOLEAN_LITERAL
   96        | STRING_LITERAL
   97        | NULLVAL
   98        | CHARACTER_LITERAL

   99 InstantiationExpr: NEW Name '(' ArgListOpt ')'

  100 ArgList: Expr
  101        | ArgList ',' Expr

  102 FieldAccess: Primary '.' IDENTIFIER

  103 MethodCall: Name '(' ArgListOpt ')'
  104           | Name '{' ArgListOpt '}'
  105           | Primary '.' IDENTIFIER '(' ArgListOpt ')'
  106           | Primary '.' IDENTIFIER '{' ArgListOpt '}'

  107 PostFixExpr: Primary
  108            | Name

  109 UnaryExpr: '-' UnaryExpr
  110          | '!' UnaryExpr
  111          | PostFixExpr

  112 MulExpr: UnaryExpr
  113        | MulExpr '*' UnaryExpr
  114        | MulExpr '/' UnaryExpr
  115        | MulExpr '%' UnaryExpr

  116 AddExpr: MulExpr
  117        | AddExpr '+' MulExpr
  118        | AddExpr '-' MulExpr

  119 RelOp: LESS_EQUAL
  120      | GREATER_EQUAL
  121      | '<'
  122      | '>'

  123 RelExpr: AddExpr
  124        | RelExpr RelOp AddExpr

  125 EqExpr: RelExpr
  126       | EqExpr EQUAL RelExpr
  127       | EqExpr NOT_EQUAL RelExpr

  128 CondAndExpr: EqExpr
  129            | CondAndExpr LOGIC_AND EqExpr

  130 CondOrExpr: CondAndExpr
  131           | CondOrExpr LOGIC_OR CondAndExpr

  132 Expr: CondOrExpr
  133     | Assignment

  134 Assignment: LeftHandSide AssignOp Expr
  135           | LeftHandSide AssignOp
  136           | Type VarDeclarator AssignOp Expr

  137 LeftHandSide: Name
  138             | FieldAccess

  139 AssignOp: '='
  140         | INCREMENT
  141         | DECREMENT


Terminals, with rules where they appear

    $end (0) 0
    '!' <treeptr> (33) 110
    '%' <treeptr> (37) 115
    '(' <treeptr> (40) 35 42 68 69 70 71 75 76 90 99 103 105
    ')' <treeptr> (41) 35 42 68 69 70 71 75 76 90 99 103 105
    '*' <treeptr> (42) 113
    '+' <treeptr> (43) 117
    ',' <treeptr> (44) 25 39 85 101
    '-' <treeptr> (45) 109 118
    '.' <treeptr> (46) 23 102 105 106
    '/' <treeptr> (47) 114
    ':' <treeptr> (58)
    ';' <treeptr> (59) 10 11 12 13 52 55 64 76 86 87 88
    '<' <treeptr> (60) 121
    '=' <treeptr> (61) 12 13 139
    '>' <treeptr> (62) 122
    '[' <treeptr> (91) 27
    ']' <treeptr> (93) 27
    '{' (123) 2 3 45 104 106
    '}' (125) 2 3 45 104 106
    error (256)
    BREAK <treeptr> (258) 86 87
    DOUBLE <treeptr> (259) 15
    ELSE <treeptr> (260) 69 71 74
    FOR <treeptr> (261) 76
    IF <treeptr> (262) 68 69 70 71
    INT <treeptr> (263) 14
    RETURN <treeptr> (264) 88
    VOID <treeptr> (265) 29
    WHILE <treeptr> (266) 75
    CLASS <treeptr> (267) 1
    STRING <treeptr> (268) 18
    BOOLEAN <treeptr> (269) 16
    CASE <treeptr> (270)
    CHAR <treeptr> (271) 19
    CONTINUE <treeptr> (272)
    DEFAULT <treeptr> (273)
    FLOAT <treeptr> (274) 17
    INSTANCEOF <treeptr> (275)
    LONG <treeptr> (276)
    NEW <treeptr> (277) 99
    SWITCH <treeptr> (278)
    NOT_RESERVED <treeptr> (279)
    PUBLIC <treeptr> (280) 1 11 13 31 32
    STATIC <treeptr> (281) 11 13 31 33
    IDENTIFIER <treeptr> (282) 1 21 23 26 35 42 87 102 105 106
    INTEGER_LITERAL <treeptr> (283) 93
    FLOAT_LITERAL <treeptr> (284) 94
    STRING_LITERAL <treeptr> (285) 96
    BOOLEAN_LITERAL <treeptr> (286) 95
    NULLVAL <treeptr> (287) 97
    CHARACTER_LITERAL <treeptr> (288) 98
    INCREMENT <treeptr> (289) 140
    DECREMENT <treeptr> (290) 141
    TYPE_CAST <treeptr> (291)
    LESS_EQUAL <treeptr> (292) 119
    GREATER_EQUAL <treeptr> (293) 120
    EQUAL <treeptr> (294) 126
    NOT_EQUAL <treeptr> (295) 127
    LOGIC_AND <treeptr> (296) 129
    LOGIC_OR <treeptr> (297) 131
    CHAR_ERROR <treeptr> (298)
    INT_ERROR <treeptr> (299)
    UNKNOWN <treeptr> (300)
    STRING_ERROR <treeptr> (301)
    OPEN_COMMENT <treeptr> (302)
    THEN <treeptr> (303)


Nonterminals, with rules where they appear

    $accept (68)
        on left: 0
    ClassDecl <treeptr> (69)
        on left: 1
        on right: 0
    ClassBody <treeptr> (70)
        on left: 2 3
        on right: 1
    ClassBodyDecls <treeptr> (71)
        on left: 4 5
        on right: 2 5
    ClassBodyDecl <treeptr> (72)
        on left: 6 7 8 9
        on right: 4 5
    FieldDecl <treeptr> (73)
        on left: 10 11
        on right: 6
    FieldDeclAssign <treeptr> (74)
        on left: 12 13
        on right: 7
    Type <treeptr> (75)
        on left: 14 15 16 17 18 19 20
        on right: 10 11 12 13 28 40 53 136
    Name <treeptr> (76)
        on left: 21 22
        on right: 20 23 99 103 104 108 137
    QualifiedName <treeptr> (77)
        on left: 23
        on right: 22
    VarDecls <treeptr> (78)
        on left: 24 25
        on right: 10 11 25 53
    VarDeclarator <treeptr> (79)
        on left: 26 27
        on right: 12 13 24 25 27 40 136
    MethodReturnVal <treeptr> (80)
        on left: 28 29
        on right: 31 32 33 34
    MethodDecl <treeptr> (81)
        on left: 30
        on right: 8
    MethodHeader <treeptr> (82)
        on left: 31 32 33 34
        on right: 30
    MethodDeclarator <treeptr> (83)
        on left: 35
        on right: 31 32 33 34
    FormalParmListOpt <treeptr> (84)
        on left: 36 37
        on right: 35 42
    FormalParmList <treeptr> (85)
        on left: 38 39
        on right: 36 39
    FormalParm <treeptr> (86)
        on left: 40
        on right: 38 39
    ConstructorDecl <treeptr> (87)
        on left: 41
        on right: 9
    ConstructorDeclarator <treeptr> (88)
        on left: 42
        on right: 41
    ArgListOpt <treeptr> (89)
        on left: 43 44
        on right: 99 103 104 105 106
    Block <treeptr> (90)
        on left: 45
        on right: 30 41 54 68 69 70 71 76
    BlockStmtsOpt <treeptr> (91)
        on left: 46 47
        on right: 45
    BlockStmts <treeptr> (92)
        on left: 48 49
        on right: 46 49
    BlockStmt <treeptr> (93)
        on left: 50 51
        on right: 48 49
    LocalVarDeclStmt <treeptr> (94)
        on left: 52
        on right: 50
    LocalVarDecl <treeptr> (95)
        on left: 53
        on right: 52 78
    Stmt <treeptr> (96)
        on left: 54 55 56 57 58 59 60 61 62 63
        on right: 51 75
    ExprStmt <treeptr> (97)
        on left: 64
        on right: 56
    StmtExpr <treeptr> (98)
        on left: 65 66 67
        on right: 64 84 85
    IfThenStmt <treeptr> (99)
        on left: 68
        on right: 59 74
    IfThenElseStmt <treeptr> (100)
        on left: 69
        on right: 60
    IfThenElseIfStmt <treeptr> (101)
        on left: 70 71
        on right: 61
    ElseIfSequence <treeptr> (102)
        on left: 72 73
        on right: 70 71 73
    ElseIfStmt <treeptr> (103)
        on left: 74
        on right: 72 73
    WhileStmt <treeptr> (104)
        on left: 75
        on right: 62
    ForStmt <treeptr> (105)
        on left: 76
        on right: 63
    ForInit <treeptr> (106)
        on left: 77 78 79
        on right: 76
    ExprOpt <treeptr> (107)
        on left: 80 81
        on right: 76 88
    ForUpdate <treeptr> (108)
        on left: 82 83
        on right: 76
    StmtExprList <treeptr> (109)
        on left: 84 85
        on right: 77 82 85
    BreakStmt <treeptr> (110)
        on left: 86 87
        on right: 57
    ReturnStmt <treeptr> (111)
        on left: 88
        on right: 58
    Primary <treeptr> (112)
        on left: 89 90 91 92
        on right: 102 105 106 107
    Literal <treeptr> (113)
        on left: 93 94 95 96 97 98
        on right: 12 13 89
    InstantiationExpr <treeptr> (114)
        on left: 99
        on right: 67
    ArgList <treeptr> (115)
        on left: 100 101
        on right: 43 101
    FieldAccess <treeptr> (116)
        on left: 102
        on right: 91 138
    MethodCall <treeptr> (117)
        on left: 103 104 105 106
        on right: 66 92
    PostFixExpr <treeptr> (118)
        on left: 107 108
        on right: 111
    UnaryExpr <treeptr> (119)
        on left: 109 110 111
        on right: 109 110 112 113 114 115
    MulExpr <treeptr> (120)
        on left: 112 113 114 115
        on right: 113 114 115 116 117 118
    AddExpr <treeptr> (121)
        on left: 116 117 118
        on right: 117 118 123 124
    RelOp <treeptr> (122)
        on left: 119 120 121 122
        on right: 124
    RelExpr <treeptr> (123)
        on left: 123 124
        on right: 124 125 126 127
    EqExpr <treeptr> (124)
        on left: 125 126 127
        on right: 126 127 128 129
    CondAndExpr <treeptr> (125)
        on left: 128 129
        on right: 129 130 131
    CondOrExpr <treeptr> (126)
        on left: 130 131
        on right: 131 132
    Expr <treeptr> (127)
        on left: 132 133
        on right: 68 69 70 71 75 80 90 100 101 134 136
    Assignment <treeptr> (128)
        on left: 134 135 136
        on right: 65 133
    LeftHandSide <treeptr> (129)
        on left: 137 138
        on right: 134 135
    AssignOp <treeptr> (130)
        on left: 139 140 141
        on right: 134 135 136


State 0

    0 $accept: . ClassDecl $end

    PUBLIC  shift, and go to state 1

    ClassDecl  go to state 2


State 1

    1 ClassDecl: PUBLIC . CLASS IDENTIFIER ClassBody

    CLASS  shift, and go to state 3


State 2

    0 $accept: ClassDecl . $end

    $end  shift, and go to state 4


State 3

    1 ClassDecl: PUBLIC CLASS . IDENTIFIER ClassBody

    IDENTIFIER  shift, and go to state 5


State 4

    0 $accept: ClassDecl $end .

    $default  accept


State 5

    1 ClassDecl: PUBLIC CLASS IDENTIFIER . ClassBody

    '{'  shift, and go to state 6

    ClassBody  go to state 7


State 6

    2 ClassBody: '{' . ClassBodyDecls '}'
    3          | '{' . '}'

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    VOID        shift, and go to state 10
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    PUBLIC      shift, and go to state 15
    STATIC      shift, and go to state 16
    IDENTIFIER  shift, and go to state 17
    '}'         shift, and go to state 18

    ClassBodyDecls         go to state 19
    ClassBodyDecl          go to state 20
    FieldDecl              go to state 21
    FieldDeclAssign        go to state 22
    Type                   go to state 23
    Name                   go to state 24
    QualifiedName          go to state 25
    MethodReturnVal        go to state 26
    MethodDecl             go to state 27
    MethodHeader           go to state 28
    ConstructorDecl        go to state 29
    ConstructorDeclarator  go to state 30


State 7

    1 ClassDecl: PUBLIC CLASS IDENTIFIER ClassBody .

    $default  reduce using rule 1 (ClassDecl)


State 8

   15 Type: DOUBLE .

    $default  reduce using rule 15 (Type)


State 9

   14 Type: INT .

    $default  reduce using rule 14 (Type)


State 10

   29 MethodReturnVal: VOID .

    $default  reduce using rule 29 (MethodReturnVal)


State 11

   18 Type: STRING .

    $default  reduce using rule 18 (Type)


State 12

   16 Type: BOOLEAN .

    $default  reduce using rule 16 (Type)


State 13

   19 Type: CHAR .

    $default  reduce using rule 19 (Type)


State 14

   17 Type: FLOAT .

    $default  reduce using rule 17 (Type)


State 15

   11 FieldDecl: PUBLIC . STATIC Type VarDecls ';'
   13 FieldDeclAssign: PUBLIC . STATIC Type VarDeclarator '=' Literal ';'
   31 MethodHeader: PUBLIC . STATIC MethodReturnVal MethodDeclarator
   32             | PUBLIC . MethodReturnVal MethodDeclarator

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    VOID        shift, and go to state 10
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    STATIC      shift, and go to state 31
    IDENTIFIER  shift, and go to state 32

    Type             go to state 33
    Name             go to state 24
    QualifiedName    go to state 25
    MethodReturnVal  go to state 34


State 16

   33 MethodHeader: STATIC . MethodReturnVal MethodDeclarator

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    VOID        shift, and go to state 10
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    IDENTIFIER  shift, and go to state 32

    Type             go to state 33
    Name             go to state 24
    QualifiedName    go to state 25
    MethodReturnVal  go to state 35


State 17

   21 Name: IDENTIFIER .
   23 QualifiedName: IDENTIFIER . '.' Name
   42 ConstructorDeclarator: IDENTIFIER . '(' FormalParmListOpt ')'

    '('  shift, and go to state 36
    '.'  shift, and go to state 37

    $default  reduce using rule 21 (Name)


State 18

    3 ClassBody: '{' '}' .

    $default  reduce using rule 3 (ClassBody)


State 19

    2 ClassBody: '{' ClassBodyDecls . '}'
    5 ClassBodyDecls: ClassBodyDecls . ClassBodyDecl

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    VOID        shift, and go to state 10
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    PUBLIC      shift, and go to state 15
    STATIC      shift, and go to state 16
    IDENTIFIER  shift, and go to state 17
    '}'         shift, and go to state 38

    ClassBodyDecl          go to state 39
    FieldDecl              go to state 21
    FieldDeclAssign        go to state 22
    Type                   go to state 23
    Name                   go to state 24
    QualifiedName          go to state 25
    MethodReturnVal        go to state 26
    MethodDecl             go to state 27
    MethodHeader           go to state 28
    ConstructorDecl        go to state 29
    ConstructorDeclarator  go to state 30


State 20

    4 ClassBodyDecls: ClassBodyDecl .

    $default  reduce using rule 4 (ClassBodyDecls)


State 21

    6 ClassBodyDecl: FieldDecl .

    $default  reduce using rule 6 (ClassBodyDecl)


State 22

    7 ClassBodyDecl: FieldDeclAssign .

    $default  reduce using rule 7 (ClassBodyDecl)


State 23

   10 FieldDecl: Type . VarDecls ';'
   12 FieldDeclAssign: Type . VarDeclarator '=' Literal ';'
   28 MethodReturnVal: Type .

    IDENTIFIER  shift, and go to state 40

    IDENTIFIER  [reduce using rule 28 (MethodReturnVal)]

    VarDecls       go to state 41
    VarDeclarator  go to state 42


State 24

   20 Type: Name .

    $default  reduce using rule 20 (Type)


State 25

   22 Name: QualifiedName .

    $default  reduce using rule 22 (Name)


State 26

   34 MethodHeader: MethodReturnVal . MethodDeclarator

    IDENTIFIER  shift, and go to state 43

    MethodDeclarator  go to state 44


State 27

    8 ClassBodyDecl: MethodDecl .

    $default  reduce using rule 8 (ClassBodyDecl)


State 28

   30 MethodDecl: MethodHeader . Block

    '{'  shift, and go to state 45

    Block  go to state 46


State 29

    9 ClassBodyDecl: ConstructorDecl .

    $default  reduce using rule 9 (ClassBodyDecl)


State 30

   41 ConstructorDecl: ConstructorDeclarator . Block

    '{'  shift, and go to state 45

    Block  go to state 47


State 31

   11 FieldDecl: PUBLIC STATIC . Type VarDecls ';'
   13 FieldDeclAssign: PUBLIC STATIC . Type VarDeclarator '=' Literal ';'
   31 MethodHeader: PUBLIC STATIC . MethodReturnVal MethodDeclarator

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    VOID        shift, and go to state 10
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    IDENTIFIER  shift, and go to state 32

    Type             go to state 48
    Name             go to state 24
    QualifiedName    go to state 25
    MethodReturnVal  go to state 49


State 32

   21 Name: IDENTIFIER .
   23 QualifiedName: IDENTIFIER . '.' Name

    '.'  shift, and go to state 37

    $default  reduce using rule 21 (Name)


State 33

   28 MethodReturnVal: Type .

    $default  reduce using rule 28 (MethodReturnVal)


State 34

   32 MethodHeader: PUBLIC MethodReturnVal . MethodDeclarator

    IDENTIFIER  shift, and go to state 43

    MethodDeclarator  go to state 50


State 35

   33 MethodHeader: STATIC MethodReturnVal . MethodDeclarator

    IDENTIFIER  shift, and go to state 43

    MethodDeclarator  go to state 51


State 36

   42 ConstructorDeclarator: IDENTIFIER '(' . FormalParmListOpt ')'

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    IDENTIFIER  shift, and go to state 32

    $default  reduce using rule 37 (FormalParmListOpt)

    Type               go to state 52
    Name               go to state 24
    QualifiedName      go to state 25
    FormalParmListOpt  go to state 53
    FormalParmList     go to state 54
    FormalParm         go to state 55


State 37

   23 QualifiedName: IDENTIFIER '.' . Name

    IDENTIFIER  shift, and go to state 32

    Name           go to state 56
    QualifiedName  go to state 25


State 38

    2 ClassBody: '{' ClassBodyDecls '}' .

    $default  reduce using rule 2 (ClassBody)


State 39

    5 ClassBodyDecls: ClassBodyDecls ClassBodyDecl .

    $default  reduce using rule 5 (ClassBodyDecls)


State 40

   26 VarDeclarator: IDENTIFIER .

    $default  reduce using rule 26 (VarDeclarator)


State 41

   10 FieldDecl: Type VarDecls . ';'
   25 VarDecls: VarDecls . ',' VarDeclarator

    ','  shift, and go to state 57
    ';'  shift, and go to state 58


State 42

   12 FieldDeclAssign: Type VarDeclarator . '=' Literal ';'
   24 VarDecls: VarDeclarator .
   27 VarDeclarator: VarDeclarator . '[' ']'

    '='  shift, and go to state 59
    '['  shift, and go to state 60

    $default  reduce using rule 24 (VarDecls)


State 43

   35 MethodDeclarator: IDENTIFIER . '(' FormalParmListOpt ')'

    '('  shift, and go to state 61


State 44

   34 MethodHeader: MethodReturnVal MethodDeclarator .

    $default  reduce using rule 34 (MethodHeader)


State 45

   45 Block: '{' . BlockStmtsOpt '}'

    BREAK              shift, and go to state 62
    DOUBLE             shift, and go to state 8
    FOR                shift, and go to state 63
    IF                 shift, and go to state 64
    INT                shift, and go to state 9
    RETURN             shift, and go to state 65
    WHILE              shift, and go to state 66
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    NEW                shift, and go to state 67
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '('                shift, and go to state 74
    ';'                shift, and go to state 75
    '{'                shift, and go to state 45

    $default  reduce using rule 47 (BlockStmtsOpt)

    Type               go to state 76
    Name               go to state 77
    QualifiedName      go to state 25
    Block              go to state 78
    BlockStmtsOpt      go to state 79
    BlockStmts         go to state 80
    BlockStmt          go to state 81
    LocalVarDeclStmt   go to state 82
    LocalVarDecl       go to state 83
    Stmt               go to state 84
    ExprStmt           go to state 85
    StmtExpr           go to state 86
    IfThenStmt         go to state 87
    IfThenElseStmt     go to state 88
    IfThenElseIfStmt   go to state 89
    WhileStmt          go to state 90
    ForStmt            go to state 91
    BreakStmt          go to state 92
    ReturnStmt         go to state 93
    Primary            go to state 94
    Literal            go to state 95
    InstantiationExpr  go to state 96
    FieldAccess        go to state 97
    MethodCall         go to state 98
    Assignment         go to state 99
    LeftHandSide       go to state 100


State 46

   30 MethodDecl: MethodHeader Block .

    $default  reduce using rule 30 (MethodDecl)


State 47

   41 ConstructorDecl: ConstructorDeclarator Block .

    $default  reduce using rule 41 (ConstructorDecl)


State 48

   11 FieldDecl: PUBLIC STATIC Type . VarDecls ';'
   13 FieldDeclAssign: PUBLIC STATIC Type . VarDeclarator '=' Literal ';'
   28 MethodReturnVal: Type .

    IDENTIFIER  shift, and go to state 40

    IDENTIFIER  [reduce using rule 28 (MethodReturnVal)]

    VarDecls       go to state 101
    VarDeclarator  go to state 102


State 49

   31 MethodHeader: PUBLIC STATIC MethodReturnVal . MethodDeclarator

    IDENTIFIER  shift, and go to state 43

    MethodDeclarator  go to state 103


State 50

   32 MethodHeader: PUBLIC MethodReturnVal MethodDeclarator .

    $default  reduce using rule 32 (MethodHeader)


State 51

   33 MethodHeader: STATIC MethodReturnVal MethodDeclarator .

    $default  reduce using rule 33 (MethodHeader)


State 52

   40 FormalParm: Type . VarDeclarator

    IDENTIFIER  shift, and go to state 40

    VarDeclarator  go to state 104


State 53

   42 ConstructorDeclarator: IDENTIFIER '(' FormalParmListOpt . ')'

    ')'  shift, and go to state 105


State 54

   36 FormalParmListOpt: FormalParmList .
   39 FormalParmList: FormalParmList . ',' FormalParm

    ','  shift, and go to state 106

    $default  reduce using rule 36 (FormalParmListOpt)


State 55

   38 FormalParmList: FormalParm .

    $default  reduce using rule 38 (FormalParmList)


State 56

   23 QualifiedName: IDENTIFIER '.' Name .

    $default  reduce using rule 23 (QualifiedName)


State 57

   25 VarDecls: VarDecls ',' . VarDeclarator

    IDENTIFIER  shift, and go to state 40

    VarDeclarator  go to state 107


State 58

   10 FieldDecl: Type VarDecls ';' .

    $default  reduce using rule 10 (FieldDecl)


State 59

   12 FieldDeclAssign: Type VarDeclarator '=' . Literal ';'

    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73

    Literal  go to state 108


State 60

   27 VarDeclarator: VarDeclarator '[' . ']'

    ']'  shift, and go to state 109


State 61

   35 MethodDeclarator: IDENTIFIER '(' . FormalParmListOpt ')'

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    IDENTIFIER  shift, and go to state 32

    $default  reduce using rule 37 (FormalParmListOpt)

    Type               go to state 52
    Name               go to state 24
    QualifiedName      go to state 25
    FormalParmListOpt  go to state 110
    FormalParmList     go to state 54
    FormalParm         go to state 55


State 62

   86 BreakStmt: BREAK . ';'
   87          | BREAK . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 111
    ';'         shift, and go to state 112


State 63

   76 ForStmt: FOR . '(' ForInit ';' ExprOpt ';' ForUpdate ')' Block

    '('  shift, and go to state 113


State 64

   68 IfThenStmt: IF . '(' Expr ')' Block
   69 IfThenElseStmt: IF . '(' Expr ')' Block ELSE Block
   70 IfThenElseIfStmt: IF . '(' Expr ')' Block ElseIfSequence
   71                 | IF . '(' Expr ')' Block ElseIfSequence ELSE Block

    '('  shift, and go to state 114


State 65

   88 ReturnStmt: RETURN . ExprOpt ';'

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    $default  reduce using rule 81 (ExprOpt)

    Type           go to state 117
    Name           go to state 118
    QualifiedName  go to state 25
    ExprOpt        go to state 119
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 97
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 128
    CondOrExpr     go to state 129
    Expr           go to state 130
    Assignment     go to state 131
    LeftHandSide   go to state 100


State 66

   75 WhileStmt: WHILE . '(' Expr ')' Stmt

    '('  shift, and go to state 132


State 67

   99 InstantiationExpr: NEW . Name '(' ArgListOpt ')'

    IDENTIFIER  shift, and go to state 32

    Name           go to state 133
    QualifiedName  go to state 25


State 68

   93 Literal: INTEGER_LITERAL .

    $default  reduce using rule 93 (Literal)


State 69

   94 Literal: FLOAT_LITERAL .

    $default  reduce using rule 94 (Literal)


State 70

   96 Literal: STRING_LITERAL .

    $default  reduce using rule 96 (Literal)


State 71

   95 Literal: BOOLEAN_LITERAL .

    $default  reduce using rule 95 (Literal)


State 72

   97 Literal: NULLVAL .

    $default  reduce using rule 97 (Literal)


State 73

   98 Literal: CHARACTER_LITERAL .

    $default  reduce using rule 98 (Literal)


State 74

   90 Primary: '(' . Expr ')'

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Type           go to state 117
    Name           go to state 118
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 97
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 128
    CondOrExpr     go to state 129
    Expr           go to state 134
    Assignment     go to state 131
    LeftHandSide   go to state 100


State 75

   55 Stmt: ';' .

    $default  reduce using rule 55 (Stmt)


State 76

   53 LocalVarDecl: Type . VarDecls
  136 Assignment: Type . VarDeclarator AssignOp Expr

    IDENTIFIER  shift, and go to state 40

    VarDecls       go to state 135
    VarDeclarator  go to state 136


State 77

   20 Type: Name .
  103 MethodCall: Name . '(' ArgListOpt ')'
  104           | Name . '{' ArgListOpt '}'
  137 LeftHandSide: Name .

    '('  shift, and go to state 137
    '{'  shift, and go to state 138

    IDENTIFIER  reduce using rule 20 (Type)
    $default    reduce using rule 137 (LeftHandSide)


State 78

   54 Stmt: Block .

    $default  reduce using rule 54 (Stmt)


State 79

   45 Block: '{' BlockStmtsOpt . '}'

    '}'  shift, and go to state 139


State 80

   46 BlockStmtsOpt: BlockStmts .
   49 BlockStmts: BlockStmts . BlockStmt

    BREAK              shift, and go to state 62
    DOUBLE             shift, and go to state 8
    FOR                shift, and go to state 63
    IF                 shift, and go to state 64
    INT                shift, and go to state 9
    RETURN             shift, and go to state 65
    WHILE              shift, and go to state 66
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    NEW                shift, and go to state 67
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '('                shift, and go to state 74
    ';'                shift, and go to state 75
    '{'                shift, and go to state 45

    $default  reduce using rule 46 (BlockStmtsOpt)

    Type               go to state 76
    Name               go to state 77
    QualifiedName      go to state 25
    Block              go to state 78
    BlockStmt          go to state 140
    LocalVarDeclStmt   go to state 82
    LocalVarDecl       go to state 83
    Stmt               go to state 84
    ExprStmt           go to state 85
    StmtExpr           go to state 86
    IfThenStmt         go to state 87
    IfThenElseStmt     go to state 88
    IfThenElseIfStmt   go to state 89
    WhileStmt          go to state 90
    ForStmt            go to state 91
    BreakStmt          go to state 92
    ReturnStmt         go to state 93
    Primary            go to state 94
    Literal            go to state 95
    InstantiationExpr  go to state 96
    FieldAccess        go to state 97
    MethodCall         go to state 98
    Assignment         go to state 99
    LeftHandSide       go to state 100


State 81

   48 BlockStmts: BlockStmt .

    $default  reduce using rule 48 (BlockStmts)


State 82

   50 BlockStmt: LocalVarDeclStmt .

    $default  reduce using rule 50 (BlockStmt)


State 83

   52 LocalVarDeclStmt: LocalVarDecl . ';'

    ';'  shift, and go to state 141


State 84

   51 BlockStmt: Stmt .

    $default  reduce using rule 51 (BlockStmt)


State 85

   56 Stmt: ExprStmt .

    $default  reduce using rule 56 (Stmt)


State 86

   64 ExprStmt: StmtExpr . ';'

    ';'  shift, and go to state 142


State 87

   59 Stmt: IfThenStmt .

    $default  reduce using rule 59 (Stmt)


State 88

   60 Stmt: IfThenElseStmt .

    $default  reduce using rule 60 (Stmt)


State 89

   61 Stmt: IfThenElseIfStmt .

    $default  reduce using rule 61 (Stmt)


State 90

   62 Stmt: WhileStmt .

    $default  reduce using rule 62 (Stmt)


State 91

   63 Stmt: ForStmt .

    $default  reduce using rule 63 (Stmt)


State 92

   57 Stmt: BreakStmt .

    $default  reduce using rule 57 (Stmt)


State 93

   58 Stmt: ReturnStmt .

    $default  reduce using rule 58 (Stmt)


State 94

  102 FieldAccess: Primary . '.' IDENTIFIER
  105 MethodCall: Primary . '.' IDENTIFIER '(' ArgListOpt ')'
  106           | Primary . '.' IDENTIFIER '{' ArgListOpt '}'

    '.'  shift, and go to state 143


State 95

   89 Primary: Literal .

    $default  reduce using rule 89 (Primary)


State 96

   67 StmtExpr: InstantiationExpr .

    $default  reduce using rule 67 (StmtExpr)


State 97

   91 Primary: FieldAccess .
  138 LeftHandSide: FieldAccess .

    INCREMENT  reduce using rule 138 (LeftHandSide)
    DECREMENT  reduce using rule 138 (LeftHandSide)
    '='        reduce using rule 138 (LeftHandSide)
    $default   reduce using rule 91 (Primary)


State 98

   66 StmtExpr: MethodCall .
   92 Primary: MethodCall .

    '.'       reduce using rule 92 (Primary)
    $default  reduce using rule 66 (StmtExpr)


State 99

   65 StmtExpr: Assignment .

    $default  reduce using rule 65 (StmtExpr)


State 100

  134 Assignment: LeftHandSide . AssignOp Expr
  135           | LeftHandSide . AssignOp

    INCREMENT  shift, and go to state 144
    DECREMENT  shift, and go to state 145
    '='        shift, and go to state 146

    AssignOp  go to state 147


State 101

   11 FieldDecl: PUBLIC STATIC Type VarDecls . ';'
   25 VarDecls: VarDecls . ',' VarDeclarator

    ','  shift, and go to state 57
    ';'  shift, and go to state 148


State 102

   13 FieldDeclAssign: PUBLIC STATIC Type VarDeclarator . '=' Literal ';'
   24 VarDecls: VarDeclarator .
   27 VarDeclarator: VarDeclarator . '[' ']'

    '='  shift, and go to state 149
    '['  shift, and go to state 60

    $default  reduce using rule 24 (VarDecls)


State 103

   31 MethodHeader: PUBLIC STATIC MethodReturnVal MethodDeclarator .

    $default  reduce using rule 31 (MethodHeader)


State 104

   27 VarDeclarator: VarDeclarator . '[' ']'
   40 FormalParm: Type VarDeclarator .

    '['  shift, and go to state 60

    $default  reduce using rule 40 (FormalParm)


State 105

   42 ConstructorDeclarator: IDENTIFIER '(' FormalParmListOpt ')' .

    $default  reduce using rule 42 (ConstructorDeclarator)


State 106

   39 FormalParmList: FormalParmList ',' . FormalParm

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    FLOAT       shift, and go to state 14
    IDENTIFIER  shift, and go to state 32

    Type           go to state 52
    Name           go to state 24
    QualifiedName  go to state 25
    FormalParm     go to state 150


State 107

   25 VarDecls: VarDecls ',' VarDeclarator .
   27 VarDeclarator: VarDeclarator . '[' ']'

    '['  shift, and go to state 60

    $default  reduce using rule 25 (VarDecls)


State 108

   12 FieldDeclAssign: Type VarDeclarator '=' Literal . ';'

    ';'  shift, and go to state 151


State 109

   27 VarDeclarator: VarDeclarator '[' ']' .

    $default  reduce using rule 27 (VarDeclarator)


State 110

   35 MethodDeclarator: IDENTIFIER '(' FormalParmListOpt . ')'

    ')'  shift, and go to state 152


State 111

   87 BreakStmt: BREAK IDENTIFIER . ';'

    ';'  shift, and go to state 153


State 112

   86 BreakStmt: BREAK ';' .

    $default  reduce using rule 86 (BreakStmt)


State 113

   76 ForStmt: FOR '(' . ForInit ';' ExprOpt ';' ForUpdate ')' Block

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    NEW                shift, and go to state 67
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '('                shift, and go to state 74

    $default  reduce using rule 79 (ForInit)

    Type               go to state 76
    Name               go to state 77
    QualifiedName      go to state 25
    LocalVarDecl       go to state 154
    StmtExpr           go to state 155
    ForInit            go to state 156
    StmtExprList       go to state 157
    Primary            go to state 94
    Literal            go to state 95
    InstantiationExpr  go to state 96
    FieldAccess        go to state 97
    MethodCall         go to state 98
    Assignment         go to state 99
    LeftHandSide       go to state 100


State 114

   68 IfThenStmt: IF '(' . Expr ')' Block
   69 IfThenElseStmt: IF '(' . Expr ')' Block ELSE Block
   70 IfThenElseIfStmt: IF '(' . Expr ')' Block ElseIfSequence
   71                 | IF '(' . Expr ')' Block ElseIfSequence ELSE Block

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Type           go to state 117
    Name           go to state 118
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 97
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 128
    CondOrExpr     go to state 129
    Expr           go to state 158
    Assignment     go to state 131
    LeftHandSide   go to state 100


State 115

  109 UnaryExpr: '-' . UnaryExpr

    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Name           go to state 159
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 160
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 161


State 116

  110 UnaryExpr: '!' . UnaryExpr

    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Name           go to state 159
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 160
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 162


State 117

  136 Assignment: Type . VarDeclarator AssignOp Expr

    IDENTIFIER  shift, and go to state 40

    VarDeclarator  go to state 163


State 118

   20 Type: Name .
  103 MethodCall: Name . '(' ArgListOpt ')'
  104           | Name . '{' ArgListOpt '}'
  108 PostFixExpr: Name .
  137 LeftHandSide: Name .

    '('  shift, and go to state 137
    '{'  shift, and go to state 138

    IDENTIFIER  reduce using rule 20 (Type)
    INCREMENT   reduce using rule 137 (LeftHandSide)
    DECREMENT   reduce using rule 137 (LeftHandSide)
    '='         reduce using rule 137 (LeftHandSide)
    $default    reduce using rule 108 (PostFixExpr)


State 119

   88 ReturnStmt: RETURN ExprOpt . ';'

    ';'  shift, and go to state 164


State 120

  102 FieldAccess: Primary . '.' IDENTIFIER
  105 MethodCall: Primary . '.' IDENTIFIER '(' ArgListOpt ')'
  106           | Primary . '.' IDENTIFIER '{' ArgListOpt '}'
  107 PostFixExpr: Primary .

    '.'  shift, and go to state 143

    $default  reduce using rule 107 (PostFixExpr)


State 121

   92 Primary: MethodCall .

    $default  reduce using rule 92 (Primary)


State 122

  111 UnaryExpr: PostFixExpr .

    $default  reduce using rule 111 (UnaryExpr)


State 123

  112 MulExpr: UnaryExpr .

    $default  reduce using rule 112 (MulExpr)


State 124

  113 MulExpr: MulExpr . '*' UnaryExpr
  114        | MulExpr . '/' UnaryExpr
  115        | MulExpr . '%' UnaryExpr
  116 AddExpr: MulExpr .

    '*'  shift, and go to state 165
    '/'  shift, and go to state 166
    '%'  shift, and go to state 167

    $default  reduce using rule 116 (AddExpr)


State 125

  117 AddExpr: AddExpr . '+' MulExpr
  118        | AddExpr . '-' MulExpr
  123 RelExpr: AddExpr .

    '+'  shift, and go to state 168
    '-'  shift, and go to state 169

    $default  reduce using rule 123 (RelExpr)


State 126

  124 RelExpr: RelExpr . RelOp AddExpr
  125 EqExpr: RelExpr .

    LESS_EQUAL     shift, and go to state 170
    GREATER_EQUAL  shift, and go to state 171
    '<'            shift, and go to state 172
    '>'            shift, and go to state 173

    $default  reduce using rule 125 (EqExpr)

    RelOp  go to state 174


State 127

  126 EqExpr: EqExpr . EQUAL RelExpr
  127       | EqExpr . NOT_EQUAL RelExpr
  128 CondAndExpr: EqExpr .

    EQUAL      shift, and go to state 175
    NOT_EQUAL  shift, and go to state 176

    $default  reduce using rule 128 (CondAndExpr)


State 128

  129 CondAndExpr: CondAndExpr . LOGIC_AND EqExpr
  130 CondOrExpr: CondAndExpr .

    LOGIC_AND  shift, and go to state 177

    $default  reduce using rule 130 (CondOrExpr)


State 129

  131 CondOrExpr: CondOrExpr . LOGIC_OR CondAndExpr
  132 Expr: CondOrExpr .

    LOGIC_OR  shift, and go to state 178

    $default  reduce using rule 132 (Expr)


State 130

   80 ExprOpt: Expr .

    $default  reduce using rule 80 (ExprOpt)


State 131

  133 Expr: Assignment .

    $default  reduce using rule 133 (Expr)


State 132

   75 WhileStmt: WHILE '(' . Expr ')' Stmt

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Type           go to state 117
    Name           go to state 118
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 97
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 128
    CondOrExpr     go to state 129
    Expr           go to state 179
    Assignment     go to state 131
    LeftHandSide   go to state 100


State 133

   99 InstantiationExpr: NEW Name . '(' ArgListOpt ')'

    '('  shift, and go to state 180


State 134

   90 Primary: '(' Expr . ')'

    ')'  shift, and go to state 181


State 135

   25 VarDecls: VarDecls . ',' VarDeclarator
   53 LocalVarDecl: Type VarDecls .

    ','  shift, and go to state 57

    $default  reduce using rule 53 (LocalVarDecl)


State 136

   24 VarDecls: VarDeclarator .
   27 VarDeclarator: VarDeclarator . '[' ']'
  136 Assignment: Type VarDeclarator . AssignOp Expr

    INCREMENT  shift, and go to state 144
    DECREMENT  shift, and go to state 145
    '='        shift, and go to state 146
    '['        shift, and go to state 60

    $default  reduce using rule 24 (VarDecls)

    AssignOp  go to state 182


State 137

  103 MethodCall: Name '(' . ArgListOpt ')'

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    $default  reduce using rule 44 (ArgListOpt)

    Type           go to state 117
    Name           go to state 118
    QualifiedName  go to state 25
    ArgListOpt     go to state 183
    Primary        go to state 120
    Literal        go to state 95
    ArgList        go to state 184
    FieldAccess    go to state 97
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 128
    CondOrExpr     go to state 129
    Expr           go to state 185
    Assignment     go to state 131
    LeftHandSide   go to state 100


State 138

  104 MethodCall: Name '{' . ArgListOpt '}'

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    $default  reduce using rule 44 (ArgListOpt)

    Type           go to state 117
    Name           go to state 118
    QualifiedName  go to state 25
    ArgListOpt     go to state 186
    Primary        go to state 120
    Literal        go to state 95
    ArgList        go to state 184
    FieldAccess    go to state 97
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 128
    CondOrExpr     go to state 129
    Expr           go to state 185
    Assignment     go to state 131
    LeftHandSide   go to state 100


State 139

   45 Block: '{' BlockStmtsOpt '}' .

    $default  reduce using rule 45 (Block)


State 140

   49 BlockStmts: BlockStmts BlockStmt .

    $default  reduce using rule 49 (BlockStmts)


State 141

   52 LocalVarDeclStmt: LocalVarDecl ';' .

    $default  reduce using rule 52 (LocalVarDeclStmt)


State 142

   64 ExprStmt: StmtExpr ';' .

    $default  reduce using rule 64 (ExprStmt)


State 143

  102 FieldAccess: Primary '.' . IDENTIFIER
  105 MethodCall: Primary '.' . IDENTIFIER '(' ArgListOpt ')'
  106           | Primary '.' . IDENTIFIER '{' ArgListOpt '}'

    IDENTIFIER  shift, and go to state 187


State 144

  140 AssignOp: INCREMENT .

    $default  reduce using rule 140 (AssignOp)


State 145

  141 AssignOp: DECREMENT .

    $default  reduce using rule 141 (AssignOp)


State 146

  139 AssignOp: '=' .

    $default  reduce using rule 139 (AssignOp)


State 147

  134 Assignment: LeftHandSide AssignOp . Expr
  135           | LeftHandSide AssignOp .

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    $default  reduce using rule 135 (Assignment)

    Type           go to state 117
    Name           go to state 118
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 97
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 128
    CondOrExpr     go to state 129
    Expr           go to state 188
    Assignment     go to state 131
    LeftHandSide   go to state 100


State 148

   11 FieldDecl: PUBLIC STATIC Type VarDecls ';' .

    $default  reduce using rule 11 (FieldDecl)


State 149

   13 FieldDeclAssign: PUBLIC STATIC Type VarDeclarator '=' . Literal ';'

    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73

    Literal  go to state 189


State 150

   39 FormalParmList: FormalParmList ',' FormalParm .

    $default  reduce using rule 39 (FormalParmList)


State 151

   12 FieldDeclAssign: Type VarDeclarator '=' Literal ';' .

    $default  reduce using rule 12 (FieldDeclAssign)


State 152

   35 MethodDeclarator: IDENTIFIER '(' FormalParmListOpt ')' .

    $default  reduce using rule 35 (MethodDeclarator)


State 153

   87 BreakStmt: BREAK IDENTIFIER ';' .

    $default  reduce using rule 87 (BreakStmt)


State 154

   78 ForInit: LocalVarDecl .

    $default  reduce using rule 78 (ForInit)


State 155

   84 StmtExprList: StmtExpr .

    $default  reduce using rule 84 (StmtExprList)


State 156

   76 ForStmt: FOR '(' ForInit . ';' ExprOpt ';' ForUpdate ')' Block

    ';'  shift, and go to state 190


State 157

   77 ForInit: StmtExprList .
   85 StmtExprList: StmtExprList . ',' StmtExpr

    ','  shift, and go to state 191

    $default  reduce using rule 77 (ForInit)


State 158

   68 IfThenStmt: IF '(' Expr . ')' Block
   69 IfThenElseStmt: IF '(' Expr . ')' Block ELSE Block
   70 IfThenElseIfStmt: IF '(' Expr . ')' Block ElseIfSequence
   71                 | IF '(' Expr . ')' Block ElseIfSequence ELSE Block

    ')'  shift, and go to state 192


State 159

  103 MethodCall: Name . '(' ArgListOpt ')'
  104           | Name . '{' ArgListOpt '}'
  108 PostFixExpr: Name .

    '('  shift, and go to state 137
    '{'  shift, and go to state 138

    $default  reduce using rule 108 (PostFixExpr)


State 160

   91 Primary: FieldAccess .

    $default  reduce using rule 91 (Primary)


State 161

  109 UnaryExpr: '-' UnaryExpr .

    $default  reduce using rule 109 (UnaryExpr)


State 162

  110 UnaryExpr: '!' UnaryExpr .

    $default  reduce using rule 110 (UnaryExpr)


State 163

   27 VarDeclarator: VarDeclarator . '[' ']'
  136 Assignment: Type VarDeclarator . AssignOp Expr

    INCREMENT  shift, and go to state 144
    DECREMENT  shift, and go to state 145
    '='        shift, and go to state 146
    '['        shift, and go to state 60

    AssignOp  go to state 182


State 164

   88 ReturnStmt: RETURN ExprOpt ';' .

    $default  reduce using rule 88 (ReturnStmt)


State 165

  113 MulExpr: MulExpr '*' . UnaryExpr

    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Name           go to state 159
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 160
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 193


State 166

  114 MulExpr: MulExpr '/' . UnaryExpr

    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Name           go to state 159
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 160
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 194


State 167

  115 MulExpr: MulExpr '%' . UnaryExpr

    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Name           go to state 159
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 160
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 195


State 168

  117 AddExpr: AddExpr '+' . MulExpr

    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Name           go to state 159
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 160
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 196


State 169

  118 AddExpr: AddExpr '-' . MulExpr

    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Name           go to state 159
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 160
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 197


State 170

  119 RelOp: LESS_EQUAL .

    $default  reduce using rule 119 (RelOp)


State 171

  120 RelOp: GREATER_EQUAL .

    $default  reduce using rule 120 (RelOp)


State 172

  121 RelOp: '<' .

    $default  reduce using rule 121 (RelOp)


State 173

  122 RelOp: '>' .

    $default  reduce using rule 122 (RelOp)


State 174

  124 RelExpr: RelExpr RelOp . AddExpr

    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Name           go to state 159
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 160
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 198


State 175

  126 EqExpr: EqExpr EQUAL . RelExpr

    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Name           go to state 159
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 160
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 199


State 176

  127 EqExpr: EqExpr NOT_EQUAL . RelExpr

    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Name           go to state 159
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 160
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 200


State 177

  129 CondAndExpr: CondAndExpr LOGIC_AND . EqExpr

    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Name           go to state 159
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 160
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 201


State 178

  131 CondOrExpr: CondOrExpr LOGIC_OR . CondAndExpr

    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Name           go to state 159
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 160
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 202


State 179

   75 WhileStmt: WHILE '(' Expr . ')' Stmt

    ')'  shift, and go to state 203


State 180

   99 InstantiationExpr: NEW Name '(' . ArgListOpt ')'

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    $default  reduce using rule 44 (ArgListOpt)

    Type           go to state 117
    Name           go to state 118
    QualifiedName  go to state 25
    ArgListOpt     go to state 204
    Primary        go to state 120
    Literal        go to state 95
    ArgList        go to state 184
    FieldAccess    go to state 97
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 128
    CondOrExpr     go to state 129
    Expr           go to state 185
    Assignment     go to state 131
    LeftHandSide   go to state 100


State 181

   90 Primary: '(' Expr ')' .

    $default  reduce using rule 90 (Primary)


State 182

  136 Assignment: Type VarDeclarator AssignOp . Expr

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Type           go to state 117
    Name           go to state 118
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 97
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 128
    CondOrExpr     go to state 129
    Expr           go to state 205
    Assignment     go to state 131
    LeftHandSide   go to state 100


State 183

  103 MethodCall: Name '(' ArgListOpt . ')'

    ')'  shift, and go to state 206


State 184

   43 ArgListOpt: ArgList .
  101 ArgList: ArgList . ',' Expr

    ','  shift, and go to state 207

    $default  reduce using rule 43 (ArgListOpt)


State 185

  100 ArgList: Expr .

    $default  reduce using rule 100 (ArgList)


State 186

  104 MethodCall: Name '{' ArgListOpt . '}'

    '}'  shift, and go to state 208


State 187

  102 FieldAccess: Primary '.' IDENTIFIER .
  105 MethodCall: Primary '.' IDENTIFIER . '(' ArgListOpt ')'
  106           | Primary '.' IDENTIFIER . '{' ArgListOpt '}'

    '('  shift, and go to state 209
    '{'  shift, and go to state 210

    $default  reduce using rule 102 (FieldAccess)


State 188

  134 Assignment: LeftHandSide AssignOp Expr .

    $default  reduce using rule 134 (Assignment)


State 189

   13 FieldDeclAssign: PUBLIC STATIC Type VarDeclarator '=' Literal . ';'

    ';'  shift, and go to state 211


State 190

   76 ForStmt: FOR '(' ForInit ';' . ExprOpt ';' ForUpdate ')' Block

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    $default  reduce using rule 81 (ExprOpt)

    Type           go to state 117
    Name           go to state 118
    QualifiedName  go to state 25
    ExprOpt        go to state 212
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 97
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 128
    CondOrExpr     go to state 129
    Expr           go to state 130
    Assignment     go to state 131
    LeftHandSide   go to state 100


State 191

   85 StmtExprList: StmtExprList ',' . StmtExpr

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    NEW                shift, and go to state 67
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '('                shift, and go to state 74

    Type               go to state 117
    Name               go to state 77
    QualifiedName      go to state 25
    StmtExpr           go to state 213
    Primary            go to state 94
    Literal            go to state 95
    InstantiationExpr  go to state 96
    FieldAccess        go to state 97
    MethodCall         go to state 98
    Assignment         go to state 99
    LeftHandSide       go to state 100


State 192

   68 IfThenStmt: IF '(' Expr ')' . Block
   69 IfThenElseStmt: IF '(' Expr ')' . Block ELSE Block
   70 IfThenElseIfStmt: IF '(' Expr ')' . Block ElseIfSequence
   71                 | IF '(' Expr ')' . Block ElseIfSequence ELSE Block

    '{'  shift, and go to state 45

    Block  go to state 214


State 193

  113 MulExpr: MulExpr '*' UnaryExpr .

    $default  reduce using rule 113 (MulExpr)


State 194

  114 MulExpr: MulExpr '/' UnaryExpr .

    $default  reduce using rule 114 (MulExpr)


State 195

  115 MulExpr: MulExpr '%' UnaryExpr .

    $default  reduce using rule 115 (MulExpr)


State 196

  113 MulExpr: MulExpr . '*' UnaryExpr
  114        | MulExpr . '/' UnaryExpr
  115        | MulExpr . '%' UnaryExpr
  117 AddExpr: AddExpr '+' MulExpr .

    '*'  shift, and go to state 165
    '/'  shift, and go to state 166
    '%'  shift, and go to state 167

    $default  reduce using rule 117 (AddExpr)


State 197

  113 MulExpr: MulExpr . '*' UnaryExpr
  114        | MulExpr . '/' UnaryExpr
  115        | MulExpr . '%' UnaryExpr
  118 AddExpr: AddExpr '-' MulExpr .

    '*'  shift, and go to state 165
    '/'  shift, and go to state 166
    '%'  shift, and go to state 167

    $default  reduce using rule 118 (AddExpr)


State 198

  117 AddExpr: AddExpr . '+' MulExpr
  118        | AddExpr . '-' MulExpr
  124 RelExpr: RelExpr RelOp AddExpr .

    '+'  shift, and go to state 168
    '-'  shift, and go to state 169

    $default  reduce using rule 124 (RelExpr)


State 199

  124 RelExpr: RelExpr . RelOp AddExpr
  126 EqExpr: EqExpr EQUAL RelExpr .

    LESS_EQUAL     shift, and go to state 170
    GREATER_EQUAL  shift, and go to state 171
    '<'            shift, and go to state 172
    '>'            shift, and go to state 173

    $default  reduce using rule 126 (EqExpr)

    RelOp  go to state 174


State 200

  124 RelExpr: RelExpr . RelOp AddExpr
  127 EqExpr: EqExpr NOT_EQUAL RelExpr .

    LESS_EQUAL     shift, and go to state 170
    GREATER_EQUAL  shift, and go to state 171
    '<'            shift, and go to state 172
    '>'            shift, and go to state 173

    $default  reduce using rule 127 (EqExpr)

    RelOp  go to state 174


State 201

  126 EqExpr: EqExpr . EQUAL RelExpr
  127       | EqExpr . NOT_EQUAL RelExpr
  129 CondAndExpr: CondAndExpr LOGIC_AND EqExpr .

    EQUAL      shift, and go to state 175
    NOT_EQUAL  shift, and go to state 176

    $default  reduce using rule 129 (CondAndExpr)


State 202

  129 CondAndExpr: CondAndExpr . LOGIC_AND EqExpr
  131 CondOrExpr: CondOrExpr LOGIC_OR CondAndExpr .

    LOGIC_AND  shift, and go to state 177

    $default  reduce using rule 131 (CondOrExpr)


State 203

   75 WhileStmt: WHILE '(' Expr ')' . Stmt

    BREAK              shift, and go to state 62
    DOUBLE             shift, and go to state 8
    FOR                shift, and go to state 63
    IF                 shift, and go to state 64
    INT                shift, and go to state 9
    RETURN             shift, and go to state 65
    WHILE              shift, and go to state 66
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    NEW                shift, and go to state 67
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '('                shift, and go to state 74
    ';'                shift, and go to state 75
    '{'                shift, and go to state 45

    Type               go to state 117
    Name               go to state 77
    QualifiedName      go to state 25
    Block              go to state 78
    Stmt               go to state 215
    ExprStmt           go to state 85
    StmtExpr           go to state 86
    IfThenStmt         go to state 87
    IfThenElseStmt     go to state 88
    IfThenElseIfStmt   go to state 89
    WhileStmt          go to state 90
    ForStmt            go to state 91
    BreakStmt          go to state 92
    ReturnStmt         go to state 93
    Primary            go to state 94
    Literal            go to state 95
    InstantiationExpr  go to state 96
    FieldAccess        go to state 97
    MethodCall         go to state 98
    Assignment         go to state 99
    LeftHandSide       go to state 100


State 204

   99 InstantiationExpr: NEW Name '(' ArgListOpt . ')'

    ')'  shift, and go to state 216


State 205

  136 Assignment: Type VarDeclarator AssignOp Expr .

    $default  reduce using rule 136 (Assignment)


State 206

  103 MethodCall: Name '(' ArgListOpt ')' .

    $default  reduce using rule 103 (MethodCall)


State 207

  101 ArgList: ArgList ',' . Expr

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Type           go to state 117
    Name           go to state 118
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 97
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 128
    CondOrExpr     go to state 129
    Expr           go to state 217
    Assignment     go to state 131
    LeftHandSide   go to state 100


State 208

  104 MethodCall: Name '{' ArgListOpt '}' .

    $default  reduce using rule 104 (MethodCall)


State 209

  105 MethodCall: Primary '.' IDENTIFIER '(' . ArgListOpt ')'

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    $default  reduce using rule 44 (ArgListOpt)

    Type           go to state 117
    Name           go to state 118
    QualifiedName  go to state 25
    ArgListOpt     go to state 218
    Primary        go to state 120
    Literal        go to state 95
    ArgList        go to state 184
    FieldAccess    go to state 97
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 128
    CondOrExpr     go to state 129
    Expr           go to state 185
    Assignment     go to state 131
    LeftHandSide   go to state 100


State 210

  106 MethodCall: Primary '.' IDENTIFIER '{' . ArgListOpt '}'

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    $default  reduce using rule 44 (ArgListOpt)

    Type           go to state 117
    Name           go to state 118
    QualifiedName  go to state 25
    ArgListOpt     go to state 219
    Primary        go to state 120
    Literal        go to state 95
    ArgList        go to state 184
    FieldAccess    go to state 97
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 128
    CondOrExpr     go to state 129
    Expr           go to state 185
    Assignment     go to state 131
    LeftHandSide   go to state 100


State 211

   13 FieldDeclAssign: PUBLIC STATIC Type VarDeclarator '=' Literal ';' .

    $default  reduce using rule 13 (FieldDeclAssign)


State 212

   76 ForStmt: FOR '(' ForInit ';' ExprOpt . ';' ForUpdate ')' Block

    ';'  shift, and go to state 220


State 213

   85 StmtExprList: StmtExprList ',' StmtExpr .

    $default  reduce using rule 85 (StmtExprList)


State 214

   68 IfThenStmt: IF '(' Expr ')' Block .
   69 IfThenElseStmt: IF '(' Expr ')' Block . ELSE Block
   70 IfThenElseIfStmt: IF '(' Expr ')' Block . ElseIfSequence
   71                 | IF '(' Expr ')' Block . ElseIfSequence ELSE Block

    ELSE  shift, and go to state 221

    $default  reduce using rule 68 (IfThenStmt)

    ElseIfSequence  go to state 222
    ElseIfStmt      go to state 223


State 215

   75 WhileStmt: WHILE '(' Expr ')' Stmt .

    $default  reduce using rule 75 (WhileStmt)


State 216

   99 InstantiationExpr: NEW Name '(' ArgListOpt ')' .

    $default  reduce using rule 99 (InstantiationExpr)


State 217

  101 ArgList: ArgList ',' Expr .

    $default  reduce using rule 101 (ArgList)


State 218

  105 MethodCall: Primary '.' IDENTIFIER '(' ArgListOpt . ')'

    ')'  shift, and go to state 224


State 219

  106 MethodCall: Primary '.' IDENTIFIER '{' ArgListOpt . '}'

    '}'  shift, and go to state 225


State 220

   76 ForStmt: FOR '(' ForInit ';' ExprOpt ';' . ForUpdate ')' Block

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    NEW                shift, and go to state 67
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '('                shift, and go to state 74

    $default  reduce using rule 83 (ForUpdate)

    Type               go to state 117
    Name               go to state 77
    QualifiedName      go to state 25
    StmtExpr           go to state 155
    ForUpdate          go to state 226
    StmtExprList       go to state 227
    Primary            go to state 94
    Literal            go to state 95
    InstantiationExpr  go to state 96
    FieldAccess        go to state 97
    MethodCall         go to state 98
    Assignment         go to state 99
    LeftHandSide       go to state 100


State 221

   69 IfThenElseStmt: IF '(' Expr ')' Block ELSE . Block
   74 ElseIfStmt: ELSE . IfThenStmt

    IF   shift, and go to state 228
    '{'  shift, and go to state 45

    Block       go to state 229
    IfThenStmt  go to state 230


State 222

   70 IfThenElseIfStmt: IF '(' Expr ')' Block ElseIfSequence .
   71                 | IF '(' Expr ')' Block ElseIfSequence . ELSE Block
   73 ElseIfSequence: ElseIfSequence . ElseIfStmt

    ELSE  shift, and go to state 231

    $default  reduce using rule 70 (IfThenElseIfStmt)

    ElseIfStmt  go to state 232


State 223

   72 ElseIfSequence: ElseIfStmt .

    $default  reduce using rule 72 (ElseIfSequence)


State 224

  105 MethodCall: Primary '.' IDENTIFIER '(' ArgListOpt ')' .

    $default  reduce using rule 105 (MethodCall)


State 225

  106 MethodCall: Primary '.' IDENTIFIER '{' ArgListOpt '}' .

    $default  reduce using rule 106 (MethodCall)


State 226

   76 ForStmt: FOR '(' ForInit ';' ExprOpt ';' ForUpdate . ')' Block

    ')'  shift, and go to state 233


State 227

   82 ForUpdate: StmtExprList .
   85 StmtExprList: StmtExprList . ',' StmtExpr

    ','  shift, and go to state 191

    $default  reduce using rule 82 (ForUpdate)


State 228

   68 IfThenStmt: IF . '(' Expr ')' Block

    '('  shift, and go to state 234


State 229

   69 IfThenElseStmt: IF '(' Expr ')' Block ELSE Block .

    $default  reduce using rule 69 (IfThenElseStmt)


State 230

   74 ElseIfStmt: ELSE IfThenStmt .

    $default  reduce using rule 74 (ElseIfStmt)


State 231

   71 IfThenElseIfStmt: IF '(' Expr ')' Block ElseIfSequence ELSE . Block
   74 ElseIfStmt: ELSE . IfThenStmt

    IF   shift, and go to state 228
    '{'  shift, and go to state 45

    Block       go to state 235
    IfThenStmt  go to state 230


State 232

   73 ElseIfSequence: ElseIfSequence ElseIfStmt .

    $default  reduce using rule 73 (ElseIfSequence)


State 233

   76 ForStmt: FOR '(' ForInit ';' ExprOpt ';' ForUpdate ')' . Block

    '{'  shift, and go to state 45

    Block  go to state 236


State 234

   68 IfThenStmt: IF '(' . Expr ')' Block

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    FLOAT              shift, and go to state 14
    IDENTIFIER         shift, and go to state 32
    INTEGER_LITERAL    shift, and go to state 68
    FLOAT_LITERAL      shift, and go to state 69
    STRING_LITERAL     shift, and go to state 70
    BOOLEAN_LITERAL    shift, and go to state 71
    NULLVAL            shift, and go to state 72
    CHARACTER_LITERAL  shift, and go to state 73
    '-'                shift, and go to state 115
    '!'                shift, and go to state 116
    '('                shift, and go to state 74

    Type           go to state 117
    Name           go to state 118
    QualifiedName  go to state 25
    Primary        go to state 120
    Literal        go to state 95
    FieldAccess    go to state 97
    MethodCall     go to state 121
    PostFixExpr    go to state 122
    UnaryExpr      go to state 123
    MulExpr        go to state 124
    AddExpr        go to state 125
    RelExpr        go to state 126
    EqExpr         go to state 127
    CondAndExpr    go to state 128
    CondOrExpr     go to state 129
    Expr           go to state 237
    Assignment     go to state 131
    LeftHandSide   go to state 100


State 235

   71 IfThenElseIfStmt: IF '(' Expr ')' Block ElseIfSequence ELSE Block .

    $default  reduce using rule 71 (IfThenElseIfStmt)


State 236

   76 ForStmt: FOR '(' ForInit ';' ExprOpt ';' ForUpdate ')' Block .

    $default  reduce using rule 76 (ForStmt)


State 237

   68 IfThenStmt: IF '(' Expr . ')' Block

    ')'  shift, and go to state 238


State 238

   68 IfThenStmt: IF '(' Expr ')' . Block

    '{'  shift, and go to state 45

    Block  go to state 239


State 239

   68 IfThenStmt: IF '(' Expr ')' Block .

    $default  reduce using rule 68 (IfThenStmt)
