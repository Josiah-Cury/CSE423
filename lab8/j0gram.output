Terminals unused in grammar

    CASE
    CONTINUE
    DEFAULT
    FLOAT
    INSTANCEOF
    LONG
    SWITCH
    NOT_RESERVED
    TYPE_CAST
    CHAR_ERROR
    INT_ERROR
    UNKNOWN
    STRING_ERROR
    OPEN_COMMENT
    THEN
    ':'


State 22 conflicts: 1 shift/reduce


Grammar

    0 $accept: ClassDecl $end

    1 ClassDecl: PUBLIC CLASS IDENTIFIER ClassBody

    2 ClassBody: '{' ClassBodyDecls '}'
    3          | '{' '}'

    4 ClassBodyDecls: ClassBodyDecl
    5               | ClassBodyDecls ClassBodyDecl

    6 ClassBodyDecl: FieldDecl
    7              | FieldDeclAssign
    8              | MethodDecl
    9              | ConstructorDecl

   10 FieldDecl: Type VarDecls ';'

   11 FieldDeclAssign: Type VarDeclarator '=' Literal ';'

   12 Type: INT
   13     | DOUBLE
   14     | BOOLEAN
   15     | STRING
   16     | CHAR
   17     | Name

   18 Name: IDENTIFIER
   19     | QualifiedName

   20 QualifiedName: Name '.' IDENTIFIER

   21 VarDecls: VarDeclarator
   22         | VarDecls ',' VarDeclarator

   23 VarDeclarator: IDENTIFIER
   24              | VarDeclarator '[' ']'

   25 MethodReturnVal: Type
   26                | VOID

   27 MethodDecl: MethodHeader Block

   28 MethodHeader: PUBLIC STATIC MethodReturnVal MethodDeclarator
   29             | PUBLIC MethodReturnVal MethodDeclarator
   30             | STATIC MethodReturnVal MethodDeclarator
   31             | MethodReturnVal MethodDeclarator

   32 MethodDeclarator: IDENTIFIER '(' FormalParmListOpt ')'

   33 FormalParmListOpt: FormalParmList
   34                  | %empty

   35 FormalParmList: FormalParm
   36               | FormalParmList ',' FormalParm

   37 FormalParm: Type VarDeclarator

   38 ConstructorDecl: ConstructorDeclarator Block

   39 ConstructorDeclarator: IDENTIFIER '(' FormalParmListOpt ')'

   40 ArgListOpt: ArgList
   41           | %empty

   42 Block: '{' BlockStmtsOpt '}'

   43 BlockStmtsOpt: BlockStmts
   44              | %empty

   45 BlockStmts: BlockStmt
   46           | BlockStmts BlockStmt

   47 BlockStmt: LocalVarDeclStmt
   48          | Stmt

   49 LocalVarDeclStmt: LocalVarDecl ';'

   50 LocalVarDecl: Type VarDecls

   51 Stmt: Block
   52     | ';'
   53     | ExprStmt
   54     | BreakStmt
   55     | ReturnStmt
   56     | IfThenStmt
   57     | IfThenElseStmt
   58     | IfThenElseIfStmt
   59     | WhileStmt
   60     | ForStmt

   61 ExprStmt: StmtExpr ';'

   62 StmtExpr: Assignment
   63         | MethodCall
   64         | InstantiationExpr

   65 IfThenStmt: IF '(' Expr ')' Block

   66 IfThenElseStmt: IF '(' Expr ')' Block ELSE Block

   67 IfThenElseIfStmt: IF '(' Expr ')' Block ElseIfSequence
   68                 | IF '(' Expr ')' Block ElseIfSequence ELSE Block

   69 ElseIfSequence: ElseIfStmt
   70               | ElseIfSequence ElseIfStmt

   71 ElseIfStmt: ELSE IfThenStmt

   72 WhileStmt: WHILE '(' Expr ')' Stmt

   73 ForStmt: FOR '(' ForInit ';' ExprOpt ';' ForUpdate ')' Block

   74 ForInit: StmtExprList
   75        | LocalVarDecl
   76        | %empty

   77 ExprOpt: Expr
   78        | %empty

   79 ForUpdate: StmtExprList
   80          | %empty

   81 StmtExprList: StmtExpr
   82             | StmtExprList ',' StmtExpr

   83 BreakStmt: BREAK ';'
   84          | BREAK IDENTIFIER ';'

   85 ReturnStmt: RETURN ExprOpt ';'

   86 Primary: Literal
   87        | '(' Expr ')'
   88        | FieldAccess
   89        | MethodCall

   90 Literal: INTEGER_LITERAL
   91        | FLOAT_LITERAL
   92        | BOOLEAN_LITERAL
   93        | STRING_LITERAL
   94        | NULLVAL
   95        | CHARACTER_LITERAL

   96 InstantiationExpr: NEW Name '(' ArgListOpt ')'

   97 ArgList: Expr
   98        | ArgList ',' Expr

   99 FieldAccess: Primary '.' IDENTIFIER

  100 MethodCall: Name '(' ArgListOpt ')'
  101           | Name '{' ArgListOpt '}'
  102           | Primary '.' IDENTIFIER '(' ArgListOpt ')'
  103           | Primary '.' IDENTIFIER '{' ArgListOpt '}'

  104 PostFixExpr: Primary
  105            | Name

  106 UnaryExpr: '-' UnaryExpr
  107          | '!' UnaryExpr
  108          | PostFixExpr

  109 MulExpr: UnaryExpr
  110        | MulExpr '*' UnaryExpr
  111        | MulExpr '/' UnaryExpr
  112        | MulExpr '%' UnaryExpr

  113 AddExpr: MulExpr
  114        | AddExpr '+' MulExpr
  115        | AddExpr '-' MulExpr

  116 RelOp: LESS_EQUAL
  117      | GREATER_EQUAL
  118      | '<'
  119      | '>'

  120 RelExpr: AddExpr
  121        | RelExpr RelOp AddExpr

  122 EqExpr: RelExpr
  123       | EqExpr EQUAL RelExpr
  124       | EqExpr NOT_EQUAL RelExpr

  125 CondAndExpr: EqExpr
  126            | CondAndExpr LOGIC_AND EqExpr

  127 CondOrExpr: CondAndExpr
  128           | CondOrExpr LOGIC_OR CondAndExpr

  129 Expr: CondOrExpr
  130     | Assignment

  131 Assignment: LeftHandSide AssignOp Expr
  132           | LeftHandSide AssignOp
  133           | Type VarDeclarator AssignOp Expr

  134 LeftHandSide: Name
  135             | FieldAccess

  136 AssignOp: '='
  137         | INCREMENT
  138         | DECREMENT


Terminals, with rules where they appear

    $end (0) 0
    '!' <treeptr> (33) 107
    '%' <treeptr> (37) 112
    '(' <treeptr> (40) 32 39 65 66 67 68 72 73 87 96 100 102
    ')' <treeptr> (41) 32 39 65 66 67 68 72 73 87 96 100 102
    '*' <treeptr> (42) 110
    '+' <treeptr> (43) 114
    ',' <treeptr> (44) 22 36 82 98
    '-' <treeptr> (45) 106 115
    '.' <treeptr> (46) 20 99 102 103
    '/' <treeptr> (47) 111
    ':' <treeptr> (58)
    ';' <treeptr> (59) 10 11 49 52 61 73 83 84 85
    '<' <treeptr> (60) 118
    '=' <treeptr> (61) 11 136
    '>' <treeptr> (62) 119
    '[' <treeptr> (91) 24
    ']' <treeptr> (93) 24
    '{' (123) 2 3 42 101 103
    '}' (125) 2 3 42 101 103
    error (256)
    BREAK <treeptr> (258) 83 84
    DOUBLE <treeptr> (259) 13
    ELSE <treeptr> (260) 66 68 71
    FOR <treeptr> (261) 73
    IF <treeptr> (262) 65 66 67 68
    INT <treeptr> (263) 12
    RETURN <treeptr> (264) 85
    VOID <treeptr> (265) 26
    WHILE <treeptr> (266) 72
    CLASS <treeptr> (267) 1
    STRING <treeptr> (268) 15
    BOOLEAN <treeptr> (269) 14
    CASE <treeptr> (270)
    CHAR <treeptr> (271) 16
    CONTINUE <treeptr> (272)
    DEFAULT <treeptr> (273)
    FLOAT <treeptr> (274)
    INSTANCEOF <treeptr> (275)
    LONG <treeptr> (276)
    NEW <treeptr> (277) 96
    SWITCH <treeptr> (278)
    NOT_RESERVED <treeptr> (279)
    PUBLIC <treeptr> (280) 1 28 29
    STATIC <treeptr> (281) 28 30
    IDENTIFIER <treeptr> (282) 1 18 20 23 32 39 84 99 102 103
    INTEGER_LITERAL <treeptr> (283) 90
    FLOAT_LITERAL <treeptr> (284) 91
    STRING_LITERAL <treeptr> (285) 93
    BOOLEAN_LITERAL <treeptr> (286) 92
    NULLVAL <treeptr> (287) 94
    CHARACTER_LITERAL <treeptr> (288) 95
    INCREMENT <treeptr> (289) 137
    DECREMENT <treeptr> (290) 138
    TYPE_CAST <treeptr> (291)
    LESS_EQUAL <treeptr> (292) 116
    GREATER_EQUAL <treeptr> (293) 117
    EQUAL <treeptr> (294) 123
    NOT_EQUAL <treeptr> (295) 124
    LOGIC_AND <treeptr> (296) 126
    LOGIC_OR <treeptr> (297) 128
    CHAR_ERROR <treeptr> (298)
    INT_ERROR <treeptr> (299)
    UNKNOWN <treeptr> (300)
    STRING_ERROR <treeptr> (301)
    OPEN_COMMENT <treeptr> (302)
    THEN <treeptr> (303)


Nonterminals, with rules where they appear

    $accept (68)
        on left: 0
    ClassDecl <treeptr> (69)
        on left: 1
        on right: 0
    ClassBody <treeptr> (70)
        on left: 2 3
        on right: 1
    ClassBodyDecls <treeptr> (71)
        on left: 4 5
        on right: 2 5
    ClassBodyDecl <treeptr> (72)
        on left: 6 7 8 9
        on right: 4 5
    FieldDecl <treeptr> (73)
        on left: 10
        on right: 6
    FieldDeclAssign <treeptr> (74)
        on left: 11
        on right: 7
    Type <treeptr> (75)
        on left: 12 13 14 15 16 17
        on right: 10 11 25 37 50 133
    Name <treeptr> (76)
        on left: 18 19
        on right: 17 20 96 100 101 105 134
    QualifiedName <treeptr> (77)
        on left: 20
        on right: 19
    VarDecls <treeptr> (78)
        on left: 21 22
        on right: 10 22 50
    VarDeclarator <treeptr> (79)
        on left: 23 24
        on right: 11 21 22 24 37 133
    MethodReturnVal <treeptr> (80)
        on left: 25 26
        on right: 28 29 30 31
    MethodDecl <treeptr> (81)
        on left: 27
        on right: 8
    MethodHeader <treeptr> (82)
        on left: 28 29 30 31
        on right: 27
    MethodDeclarator <treeptr> (83)
        on left: 32
        on right: 28 29 30 31
    FormalParmListOpt <treeptr> (84)
        on left: 33 34
        on right: 32 39
    FormalParmList <treeptr> (85)
        on left: 35 36
        on right: 33 36
    FormalParm <treeptr> (86)
        on left: 37
        on right: 35 36
    ConstructorDecl <treeptr> (87)
        on left: 38
        on right: 9
    ConstructorDeclarator <treeptr> (88)
        on left: 39
        on right: 38
    ArgListOpt <treeptr> (89)
        on left: 40 41
        on right: 96 100 101 102 103
    Block <treeptr> (90)
        on left: 42
        on right: 27 38 51 65 66 67 68 73
    BlockStmtsOpt <treeptr> (91)
        on left: 43 44
        on right: 42
    BlockStmts <treeptr> (92)
        on left: 45 46
        on right: 43 46
    BlockStmt <treeptr> (93)
        on left: 47 48
        on right: 45 46
    LocalVarDeclStmt <treeptr> (94)
        on left: 49
        on right: 47
    LocalVarDecl <treeptr> (95)
        on left: 50
        on right: 49 75
    Stmt <treeptr> (96)
        on left: 51 52 53 54 55 56 57 58 59 60
        on right: 48 72
    ExprStmt <treeptr> (97)
        on left: 61
        on right: 53
    StmtExpr <treeptr> (98)
        on left: 62 63 64
        on right: 61 81 82
    IfThenStmt <treeptr> (99)
        on left: 65
        on right: 56 71
    IfThenElseStmt <treeptr> (100)
        on left: 66
        on right: 57
    IfThenElseIfStmt <treeptr> (101)
        on left: 67 68
        on right: 58
    ElseIfSequence <treeptr> (102)
        on left: 69 70
        on right: 67 68 70
    ElseIfStmt <treeptr> (103)
        on left: 71
        on right: 69 70
    WhileStmt <treeptr> (104)
        on left: 72
        on right: 59
    ForStmt <treeptr> (105)
        on left: 73
        on right: 60
    ForInit <treeptr> (106)
        on left: 74 75 76
        on right: 73
    ExprOpt <treeptr> (107)
        on left: 77 78
        on right: 73 85
    ForUpdate <treeptr> (108)
        on left: 79 80
        on right: 73
    StmtExprList <treeptr> (109)
        on left: 81 82
        on right: 74 79 82
    BreakStmt <treeptr> (110)
        on left: 83 84
        on right: 54
    ReturnStmt <treeptr> (111)
        on left: 85
        on right: 55
    Primary <treeptr> (112)
        on left: 86 87 88 89
        on right: 99 102 103 104
    Literal <treeptr> (113)
        on left: 90 91 92 93 94 95
        on right: 11 86
    InstantiationExpr <treeptr> (114)
        on left: 96
        on right: 64
    ArgList <treeptr> (115)
        on left: 97 98
        on right: 40 98
    FieldAccess <treeptr> (116)
        on left: 99
        on right: 88 135
    MethodCall <treeptr> (117)
        on left: 100 101 102 103
        on right: 63 89
    PostFixExpr <treeptr> (118)
        on left: 104 105
        on right: 108
    UnaryExpr <treeptr> (119)
        on left: 106 107 108
        on right: 106 107 109 110 111 112
    MulExpr <treeptr> (120)
        on left: 109 110 111 112
        on right: 110 111 112 113 114 115
    AddExpr <treeptr> (121)
        on left: 113 114 115
        on right: 114 115 120 121
    RelOp <treeptr> (122)
        on left: 116 117 118 119
        on right: 121
    RelExpr <treeptr> (123)
        on left: 120 121
        on right: 121 122 123 124
    EqExpr <treeptr> (124)
        on left: 122 123 124
        on right: 123 124 125 126
    CondAndExpr <treeptr> (125)
        on left: 125 126
        on right: 126 127 128
    CondOrExpr <treeptr> (126)
        on left: 127 128
        on right: 128 129
    Expr <treeptr> (127)
        on left: 129 130
        on right: 65 66 67 68 72 77 87 97 98 131 133
    Assignment <treeptr> (128)
        on left: 131 132 133
        on right: 62 130
    LeftHandSide <treeptr> (129)
        on left: 134 135
        on right: 131 132
    AssignOp <treeptr> (130)
        on left: 136 137 138
        on right: 131 132 133


State 0

    0 $accept: . ClassDecl $end

    PUBLIC  shift, and go to state 1

    ClassDecl  go to state 2


State 1

    1 ClassDecl: PUBLIC . CLASS IDENTIFIER ClassBody

    CLASS  shift, and go to state 3


State 2

    0 $accept: ClassDecl . $end

    $end  shift, and go to state 4


State 3

    1 ClassDecl: PUBLIC CLASS . IDENTIFIER ClassBody

    IDENTIFIER  shift, and go to state 5


State 4

    0 $accept: ClassDecl $end .

    $default  accept


State 5

    1 ClassDecl: PUBLIC CLASS IDENTIFIER . ClassBody

    '{'  shift, and go to state 6

    ClassBody  go to state 7


State 6

    2 ClassBody: '{' . ClassBodyDecls '}'
    3          | '{' . '}'

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    VOID        shift, and go to state 10
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    PUBLIC      shift, and go to state 14
    STATIC      shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    '}'         shift, and go to state 17

    ClassBodyDecls         go to state 18
    ClassBodyDecl          go to state 19
    FieldDecl              go to state 20
    FieldDeclAssign        go to state 21
    Type                   go to state 22
    Name                   go to state 23
    QualifiedName          go to state 24
    MethodReturnVal        go to state 25
    MethodDecl             go to state 26
    MethodHeader           go to state 27
    ConstructorDecl        go to state 28
    ConstructorDeclarator  go to state 29


State 7

    1 ClassDecl: PUBLIC CLASS IDENTIFIER ClassBody .

    $default  reduce using rule 1 (ClassDecl)


State 8

   13 Type: DOUBLE .

    $default  reduce using rule 13 (Type)


State 9

   12 Type: INT .

    $default  reduce using rule 12 (Type)


State 10

   26 MethodReturnVal: VOID .

    $default  reduce using rule 26 (MethodReturnVal)


State 11

   15 Type: STRING .

    $default  reduce using rule 15 (Type)


State 12

   14 Type: BOOLEAN .

    $default  reduce using rule 14 (Type)


State 13

   16 Type: CHAR .

    $default  reduce using rule 16 (Type)


State 14

   28 MethodHeader: PUBLIC . STATIC MethodReturnVal MethodDeclarator
   29             | PUBLIC . MethodReturnVal MethodDeclarator

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    VOID        shift, and go to state 10
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    STATIC      shift, and go to state 30
    IDENTIFIER  shift, and go to state 31

    Type             go to state 32
    Name             go to state 23
    QualifiedName    go to state 24
    MethodReturnVal  go to state 33


State 15

   30 MethodHeader: STATIC . MethodReturnVal MethodDeclarator

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    VOID        shift, and go to state 10
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    IDENTIFIER  shift, and go to state 31

    Type             go to state 32
    Name             go to state 23
    QualifiedName    go to state 24
    MethodReturnVal  go to state 34


State 16

   18 Name: IDENTIFIER .
   39 ConstructorDeclarator: IDENTIFIER . '(' FormalParmListOpt ')'

    '('  shift, and go to state 35

    $default  reduce using rule 18 (Name)


State 17

    3 ClassBody: '{' '}' .

    $default  reduce using rule 3 (ClassBody)


State 18

    2 ClassBody: '{' ClassBodyDecls . '}'
    5 ClassBodyDecls: ClassBodyDecls . ClassBodyDecl

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    VOID        shift, and go to state 10
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    PUBLIC      shift, and go to state 14
    STATIC      shift, and go to state 15
    IDENTIFIER  shift, and go to state 16
    '}'         shift, and go to state 36

    ClassBodyDecl          go to state 37
    FieldDecl              go to state 20
    FieldDeclAssign        go to state 21
    Type                   go to state 22
    Name                   go to state 23
    QualifiedName          go to state 24
    MethodReturnVal        go to state 25
    MethodDecl             go to state 26
    MethodHeader           go to state 27
    ConstructorDecl        go to state 28
    ConstructorDeclarator  go to state 29


State 19

    4 ClassBodyDecls: ClassBodyDecl .

    $default  reduce using rule 4 (ClassBodyDecls)


State 20

    6 ClassBodyDecl: FieldDecl .

    $default  reduce using rule 6 (ClassBodyDecl)


State 21

    7 ClassBodyDecl: FieldDeclAssign .

    $default  reduce using rule 7 (ClassBodyDecl)


State 22

   10 FieldDecl: Type . VarDecls ';'
   11 FieldDeclAssign: Type . VarDeclarator '=' Literal ';'
   25 MethodReturnVal: Type .

    IDENTIFIER  shift, and go to state 38

    IDENTIFIER  [reduce using rule 25 (MethodReturnVal)]

    VarDecls       go to state 39
    VarDeclarator  go to state 40


State 23

   17 Type: Name .
   20 QualifiedName: Name . '.' IDENTIFIER

    '.'  shift, and go to state 41

    $default  reduce using rule 17 (Type)


State 24

   19 Name: QualifiedName .

    $default  reduce using rule 19 (Name)


State 25

   31 MethodHeader: MethodReturnVal . MethodDeclarator

    IDENTIFIER  shift, and go to state 42

    MethodDeclarator  go to state 43


State 26

    8 ClassBodyDecl: MethodDecl .

    $default  reduce using rule 8 (ClassBodyDecl)


State 27

   27 MethodDecl: MethodHeader . Block

    '{'  shift, and go to state 44

    Block  go to state 45


State 28

    9 ClassBodyDecl: ConstructorDecl .

    $default  reduce using rule 9 (ClassBodyDecl)


State 29

   38 ConstructorDecl: ConstructorDeclarator . Block

    '{'  shift, and go to state 44

    Block  go to state 46


State 30

   28 MethodHeader: PUBLIC STATIC . MethodReturnVal MethodDeclarator

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    VOID        shift, and go to state 10
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    IDENTIFIER  shift, and go to state 31

    Type             go to state 32
    Name             go to state 23
    QualifiedName    go to state 24
    MethodReturnVal  go to state 47


State 31

   18 Name: IDENTIFIER .

    $default  reduce using rule 18 (Name)


State 32

   25 MethodReturnVal: Type .

    $default  reduce using rule 25 (MethodReturnVal)


State 33

   29 MethodHeader: PUBLIC MethodReturnVal . MethodDeclarator

    IDENTIFIER  shift, and go to state 42

    MethodDeclarator  go to state 48


State 34

   30 MethodHeader: STATIC MethodReturnVal . MethodDeclarator

    IDENTIFIER  shift, and go to state 42

    MethodDeclarator  go to state 49


State 35

   39 ConstructorDeclarator: IDENTIFIER '(' . FormalParmListOpt ')'

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    IDENTIFIER  shift, and go to state 31

    $default  reduce using rule 34 (FormalParmListOpt)

    Type               go to state 50
    Name               go to state 23
    QualifiedName      go to state 24
    FormalParmListOpt  go to state 51
    FormalParmList     go to state 52
    FormalParm         go to state 53


State 36

    2 ClassBody: '{' ClassBodyDecls '}' .

    $default  reduce using rule 2 (ClassBody)


State 37

    5 ClassBodyDecls: ClassBodyDecls ClassBodyDecl .

    $default  reduce using rule 5 (ClassBodyDecls)


State 38

   23 VarDeclarator: IDENTIFIER .

    $default  reduce using rule 23 (VarDeclarator)


State 39

   10 FieldDecl: Type VarDecls . ';'
   22 VarDecls: VarDecls . ',' VarDeclarator

    ','  shift, and go to state 54
    ';'  shift, and go to state 55


State 40

   11 FieldDeclAssign: Type VarDeclarator . '=' Literal ';'
   21 VarDecls: VarDeclarator .
   24 VarDeclarator: VarDeclarator . '[' ']'

    '='  shift, and go to state 56
    '['  shift, and go to state 57

    $default  reduce using rule 21 (VarDecls)


State 41

   20 QualifiedName: Name '.' . IDENTIFIER

    IDENTIFIER  shift, and go to state 58


State 42

   32 MethodDeclarator: IDENTIFIER . '(' FormalParmListOpt ')'

    '('  shift, and go to state 59


State 43

   31 MethodHeader: MethodReturnVal MethodDeclarator .

    $default  reduce using rule 31 (MethodHeader)


State 44

   42 Block: '{' . BlockStmtsOpt '}'

    BREAK              shift, and go to state 60
    DOUBLE             shift, and go to state 8
    FOR                shift, and go to state 61
    IF                 shift, and go to state 62
    INT                shift, and go to state 9
    RETURN             shift, and go to state 63
    WHILE              shift, and go to state 64
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    NEW                shift, and go to state 65
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '('                shift, and go to state 72
    ';'                shift, and go to state 73
    '{'                shift, and go to state 44

    $default  reduce using rule 44 (BlockStmtsOpt)

    Type               go to state 74
    Name               go to state 75
    QualifiedName      go to state 24
    Block              go to state 76
    BlockStmtsOpt      go to state 77
    BlockStmts         go to state 78
    BlockStmt          go to state 79
    LocalVarDeclStmt   go to state 80
    LocalVarDecl       go to state 81
    Stmt               go to state 82
    ExprStmt           go to state 83
    StmtExpr           go to state 84
    IfThenStmt         go to state 85
    IfThenElseStmt     go to state 86
    IfThenElseIfStmt   go to state 87
    WhileStmt          go to state 88
    ForStmt            go to state 89
    BreakStmt          go to state 90
    ReturnStmt         go to state 91
    Primary            go to state 92
    Literal            go to state 93
    InstantiationExpr  go to state 94
    FieldAccess        go to state 95
    MethodCall         go to state 96
    Assignment         go to state 97
    LeftHandSide       go to state 98


State 45

   27 MethodDecl: MethodHeader Block .

    $default  reduce using rule 27 (MethodDecl)


State 46

   38 ConstructorDecl: ConstructorDeclarator Block .

    $default  reduce using rule 38 (ConstructorDecl)


State 47

   28 MethodHeader: PUBLIC STATIC MethodReturnVal . MethodDeclarator

    IDENTIFIER  shift, and go to state 42

    MethodDeclarator  go to state 99


State 48

   29 MethodHeader: PUBLIC MethodReturnVal MethodDeclarator .

    $default  reduce using rule 29 (MethodHeader)


State 49

   30 MethodHeader: STATIC MethodReturnVal MethodDeclarator .

    $default  reduce using rule 30 (MethodHeader)


State 50

   37 FormalParm: Type . VarDeclarator

    IDENTIFIER  shift, and go to state 38

    VarDeclarator  go to state 100


State 51

   39 ConstructorDeclarator: IDENTIFIER '(' FormalParmListOpt . ')'

    ')'  shift, and go to state 101


State 52

   33 FormalParmListOpt: FormalParmList .
   36 FormalParmList: FormalParmList . ',' FormalParm

    ','  shift, and go to state 102

    $default  reduce using rule 33 (FormalParmListOpt)


State 53

   35 FormalParmList: FormalParm .

    $default  reduce using rule 35 (FormalParmList)


State 54

   22 VarDecls: VarDecls ',' . VarDeclarator

    IDENTIFIER  shift, and go to state 38

    VarDeclarator  go to state 103


State 55

   10 FieldDecl: Type VarDecls ';' .

    $default  reduce using rule 10 (FieldDecl)


State 56

   11 FieldDeclAssign: Type VarDeclarator '=' . Literal ';'

    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71

    Literal  go to state 104


State 57

   24 VarDeclarator: VarDeclarator '[' . ']'

    ']'  shift, and go to state 105


State 58

   20 QualifiedName: Name '.' IDENTIFIER .

    $default  reduce using rule 20 (QualifiedName)


State 59

   32 MethodDeclarator: IDENTIFIER '(' . FormalParmListOpt ')'

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    IDENTIFIER  shift, and go to state 31

    $default  reduce using rule 34 (FormalParmListOpt)

    Type               go to state 50
    Name               go to state 23
    QualifiedName      go to state 24
    FormalParmListOpt  go to state 106
    FormalParmList     go to state 52
    FormalParm         go to state 53


State 60

   83 BreakStmt: BREAK . ';'
   84          | BREAK . IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 107
    ';'         shift, and go to state 108


State 61

   73 ForStmt: FOR . '(' ForInit ';' ExprOpt ';' ForUpdate ')' Block

    '('  shift, and go to state 109


State 62

   65 IfThenStmt: IF . '(' Expr ')' Block
   66 IfThenElseStmt: IF . '(' Expr ')' Block ELSE Block
   67 IfThenElseIfStmt: IF . '(' Expr ')' Block ElseIfSequence
   68                 | IF . '(' Expr ')' Block ElseIfSequence ELSE Block

    '('  shift, and go to state 110


State 63

   85 ReturnStmt: RETURN . ExprOpt ';'

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    $default  reduce using rule 78 (ExprOpt)

    Type           go to state 113
    Name           go to state 114
    QualifiedName  go to state 24
    ExprOpt        go to state 115
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 95
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 124
    CondOrExpr     go to state 125
    Expr           go to state 126
    Assignment     go to state 127
    LeftHandSide   go to state 98


State 64

   72 WhileStmt: WHILE . '(' Expr ')' Stmt

    '('  shift, and go to state 128


State 65

   96 InstantiationExpr: NEW . Name '(' ArgListOpt ')'

    IDENTIFIER  shift, and go to state 31

    Name           go to state 129
    QualifiedName  go to state 24


State 66

   90 Literal: INTEGER_LITERAL .

    $default  reduce using rule 90 (Literal)


State 67

   91 Literal: FLOAT_LITERAL .

    $default  reduce using rule 91 (Literal)


State 68

   93 Literal: STRING_LITERAL .

    $default  reduce using rule 93 (Literal)


State 69

   92 Literal: BOOLEAN_LITERAL .

    $default  reduce using rule 92 (Literal)


State 70

   94 Literal: NULLVAL .

    $default  reduce using rule 94 (Literal)


State 71

   95 Literal: CHARACTER_LITERAL .

    $default  reduce using rule 95 (Literal)


State 72

   87 Primary: '(' . Expr ')'

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Type           go to state 113
    Name           go to state 114
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 95
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 124
    CondOrExpr     go to state 125
    Expr           go to state 130
    Assignment     go to state 127
    LeftHandSide   go to state 98


State 73

   52 Stmt: ';' .

    $default  reduce using rule 52 (Stmt)


State 74

   50 LocalVarDecl: Type . VarDecls
  133 Assignment: Type . VarDeclarator AssignOp Expr

    IDENTIFIER  shift, and go to state 38

    VarDecls       go to state 131
    VarDeclarator  go to state 132


State 75

   17 Type: Name .
   20 QualifiedName: Name . '.' IDENTIFIER
  100 MethodCall: Name . '(' ArgListOpt ')'
  101           | Name . '{' ArgListOpt '}'
  134 LeftHandSide: Name .

    '('  shift, and go to state 133
    '.'  shift, and go to state 41
    '{'  shift, and go to state 134

    IDENTIFIER  reduce using rule 17 (Type)
    $default    reduce using rule 134 (LeftHandSide)


State 76

   51 Stmt: Block .

    $default  reduce using rule 51 (Stmt)


State 77

   42 Block: '{' BlockStmtsOpt . '}'

    '}'  shift, and go to state 135


State 78

   43 BlockStmtsOpt: BlockStmts .
   46 BlockStmts: BlockStmts . BlockStmt

    BREAK              shift, and go to state 60
    DOUBLE             shift, and go to state 8
    FOR                shift, and go to state 61
    IF                 shift, and go to state 62
    INT                shift, and go to state 9
    RETURN             shift, and go to state 63
    WHILE              shift, and go to state 64
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    NEW                shift, and go to state 65
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '('                shift, and go to state 72
    ';'                shift, and go to state 73
    '{'                shift, and go to state 44

    $default  reduce using rule 43 (BlockStmtsOpt)

    Type               go to state 74
    Name               go to state 75
    QualifiedName      go to state 24
    Block              go to state 76
    BlockStmt          go to state 136
    LocalVarDeclStmt   go to state 80
    LocalVarDecl       go to state 81
    Stmt               go to state 82
    ExprStmt           go to state 83
    StmtExpr           go to state 84
    IfThenStmt         go to state 85
    IfThenElseStmt     go to state 86
    IfThenElseIfStmt   go to state 87
    WhileStmt          go to state 88
    ForStmt            go to state 89
    BreakStmt          go to state 90
    ReturnStmt         go to state 91
    Primary            go to state 92
    Literal            go to state 93
    InstantiationExpr  go to state 94
    FieldAccess        go to state 95
    MethodCall         go to state 96
    Assignment         go to state 97
    LeftHandSide       go to state 98


State 79

   45 BlockStmts: BlockStmt .

    $default  reduce using rule 45 (BlockStmts)


State 80

   47 BlockStmt: LocalVarDeclStmt .

    $default  reduce using rule 47 (BlockStmt)


State 81

   49 LocalVarDeclStmt: LocalVarDecl . ';'

    ';'  shift, and go to state 137


State 82

   48 BlockStmt: Stmt .

    $default  reduce using rule 48 (BlockStmt)


State 83

   53 Stmt: ExprStmt .

    $default  reduce using rule 53 (Stmt)


State 84

   61 ExprStmt: StmtExpr . ';'

    ';'  shift, and go to state 138


State 85

   56 Stmt: IfThenStmt .

    $default  reduce using rule 56 (Stmt)


State 86

   57 Stmt: IfThenElseStmt .

    $default  reduce using rule 57 (Stmt)


State 87

   58 Stmt: IfThenElseIfStmt .

    $default  reduce using rule 58 (Stmt)


State 88

   59 Stmt: WhileStmt .

    $default  reduce using rule 59 (Stmt)


State 89

   60 Stmt: ForStmt .

    $default  reduce using rule 60 (Stmt)


State 90

   54 Stmt: BreakStmt .

    $default  reduce using rule 54 (Stmt)


State 91

   55 Stmt: ReturnStmt .

    $default  reduce using rule 55 (Stmt)


State 92

   99 FieldAccess: Primary . '.' IDENTIFIER
  102 MethodCall: Primary . '.' IDENTIFIER '(' ArgListOpt ')'
  103           | Primary . '.' IDENTIFIER '{' ArgListOpt '}'

    '.'  shift, and go to state 139


State 93

   86 Primary: Literal .

    $default  reduce using rule 86 (Primary)


State 94

   64 StmtExpr: InstantiationExpr .

    $default  reduce using rule 64 (StmtExpr)


State 95

   88 Primary: FieldAccess .
  135 LeftHandSide: FieldAccess .

    INCREMENT  reduce using rule 135 (LeftHandSide)
    DECREMENT  reduce using rule 135 (LeftHandSide)
    '='        reduce using rule 135 (LeftHandSide)
    $default   reduce using rule 88 (Primary)


State 96

   63 StmtExpr: MethodCall .
   89 Primary: MethodCall .

    '.'       reduce using rule 89 (Primary)
    $default  reduce using rule 63 (StmtExpr)


State 97

   62 StmtExpr: Assignment .

    $default  reduce using rule 62 (StmtExpr)


State 98

  131 Assignment: LeftHandSide . AssignOp Expr
  132           | LeftHandSide . AssignOp

    INCREMENT  shift, and go to state 140
    DECREMENT  shift, and go to state 141
    '='        shift, and go to state 142

    AssignOp  go to state 143


State 99

   28 MethodHeader: PUBLIC STATIC MethodReturnVal MethodDeclarator .

    $default  reduce using rule 28 (MethodHeader)


State 100

   24 VarDeclarator: VarDeclarator . '[' ']'
   37 FormalParm: Type VarDeclarator .

    '['  shift, and go to state 57

    $default  reduce using rule 37 (FormalParm)


State 101

   39 ConstructorDeclarator: IDENTIFIER '(' FormalParmListOpt ')' .

    $default  reduce using rule 39 (ConstructorDeclarator)


State 102

   36 FormalParmList: FormalParmList ',' . FormalParm

    DOUBLE      shift, and go to state 8
    INT         shift, and go to state 9
    STRING      shift, and go to state 11
    BOOLEAN     shift, and go to state 12
    CHAR        shift, and go to state 13
    IDENTIFIER  shift, and go to state 31

    Type           go to state 50
    Name           go to state 23
    QualifiedName  go to state 24
    FormalParm     go to state 144


State 103

   22 VarDecls: VarDecls ',' VarDeclarator .
   24 VarDeclarator: VarDeclarator . '[' ']'

    '['  shift, and go to state 57

    $default  reduce using rule 22 (VarDecls)


State 104

   11 FieldDeclAssign: Type VarDeclarator '=' Literal . ';'

    ';'  shift, and go to state 145


State 105

   24 VarDeclarator: VarDeclarator '[' ']' .

    $default  reduce using rule 24 (VarDeclarator)


State 106

   32 MethodDeclarator: IDENTIFIER '(' FormalParmListOpt . ')'

    ')'  shift, and go to state 146


State 107

   84 BreakStmt: BREAK IDENTIFIER . ';'

    ';'  shift, and go to state 147


State 108

   83 BreakStmt: BREAK ';' .

    $default  reduce using rule 83 (BreakStmt)


State 109

   73 ForStmt: FOR '(' . ForInit ';' ExprOpt ';' ForUpdate ')' Block

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    NEW                shift, and go to state 65
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '('                shift, and go to state 72

    $default  reduce using rule 76 (ForInit)

    Type               go to state 74
    Name               go to state 75
    QualifiedName      go to state 24
    LocalVarDecl       go to state 148
    StmtExpr           go to state 149
    ForInit            go to state 150
    StmtExprList       go to state 151
    Primary            go to state 92
    Literal            go to state 93
    InstantiationExpr  go to state 94
    FieldAccess        go to state 95
    MethodCall         go to state 96
    Assignment         go to state 97
    LeftHandSide       go to state 98


State 110

   65 IfThenStmt: IF '(' . Expr ')' Block
   66 IfThenElseStmt: IF '(' . Expr ')' Block ELSE Block
   67 IfThenElseIfStmt: IF '(' . Expr ')' Block ElseIfSequence
   68                 | IF '(' . Expr ')' Block ElseIfSequence ELSE Block

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Type           go to state 113
    Name           go to state 114
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 95
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 124
    CondOrExpr     go to state 125
    Expr           go to state 152
    Assignment     go to state 127
    LeftHandSide   go to state 98


State 111

  106 UnaryExpr: '-' . UnaryExpr

    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Name           go to state 153
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 154
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 155


State 112

  107 UnaryExpr: '!' . UnaryExpr

    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Name           go to state 153
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 154
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 156


State 113

  133 Assignment: Type . VarDeclarator AssignOp Expr

    IDENTIFIER  shift, and go to state 38

    VarDeclarator  go to state 157


State 114

   17 Type: Name .
   20 QualifiedName: Name . '.' IDENTIFIER
  100 MethodCall: Name . '(' ArgListOpt ')'
  101           | Name . '{' ArgListOpt '}'
  105 PostFixExpr: Name .
  134 LeftHandSide: Name .

    '('  shift, and go to state 133
    '.'  shift, and go to state 41
    '{'  shift, and go to state 134

    IDENTIFIER  reduce using rule 17 (Type)
    INCREMENT   reduce using rule 134 (LeftHandSide)
    DECREMENT   reduce using rule 134 (LeftHandSide)
    '='         reduce using rule 134 (LeftHandSide)
    $default    reduce using rule 105 (PostFixExpr)


State 115

   85 ReturnStmt: RETURN ExprOpt . ';'

    ';'  shift, and go to state 158


State 116

   99 FieldAccess: Primary . '.' IDENTIFIER
  102 MethodCall: Primary . '.' IDENTIFIER '(' ArgListOpt ')'
  103           | Primary . '.' IDENTIFIER '{' ArgListOpt '}'
  104 PostFixExpr: Primary .

    '.'  shift, and go to state 139

    $default  reduce using rule 104 (PostFixExpr)


State 117

   89 Primary: MethodCall .

    $default  reduce using rule 89 (Primary)


State 118

  108 UnaryExpr: PostFixExpr .

    $default  reduce using rule 108 (UnaryExpr)


State 119

  109 MulExpr: UnaryExpr .

    $default  reduce using rule 109 (MulExpr)


State 120

  110 MulExpr: MulExpr . '*' UnaryExpr
  111        | MulExpr . '/' UnaryExpr
  112        | MulExpr . '%' UnaryExpr
  113 AddExpr: MulExpr .

    '*'  shift, and go to state 159
    '/'  shift, and go to state 160
    '%'  shift, and go to state 161

    $default  reduce using rule 113 (AddExpr)


State 121

  114 AddExpr: AddExpr . '+' MulExpr
  115        | AddExpr . '-' MulExpr
  120 RelExpr: AddExpr .

    '+'  shift, and go to state 162
    '-'  shift, and go to state 163

    $default  reduce using rule 120 (RelExpr)


State 122

  121 RelExpr: RelExpr . RelOp AddExpr
  122 EqExpr: RelExpr .

    LESS_EQUAL     shift, and go to state 164
    GREATER_EQUAL  shift, and go to state 165
    '<'            shift, and go to state 166
    '>'            shift, and go to state 167

    $default  reduce using rule 122 (EqExpr)

    RelOp  go to state 168


State 123

  123 EqExpr: EqExpr . EQUAL RelExpr
  124       | EqExpr . NOT_EQUAL RelExpr
  125 CondAndExpr: EqExpr .

    EQUAL      shift, and go to state 169
    NOT_EQUAL  shift, and go to state 170

    $default  reduce using rule 125 (CondAndExpr)


State 124

  126 CondAndExpr: CondAndExpr . LOGIC_AND EqExpr
  127 CondOrExpr: CondAndExpr .

    LOGIC_AND  shift, and go to state 171

    $default  reduce using rule 127 (CondOrExpr)


State 125

  128 CondOrExpr: CondOrExpr . LOGIC_OR CondAndExpr
  129 Expr: CondOrExpr .

    LOGIC_OR  shift, and go to state 172

    $default  reduce using rule 129 (Expr)


State 126

   77 ExprOpt: Expr .

    $default  reduce using rule 77 (ExprOpt)


State 127

  130 Expr: Assignment .

    $default  reduce using rule 130 (Expr)


State 128

   72 WhileStmt: WHILE '(' . Expr ')' Stmt

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Type           go to state 113
    Name           go to state 114
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 95
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 124
    CondOrExpr     go to state 125
    Expr           go to state 173
    Assignment     go to state 127
    LeftHandSide   go to state 98


State 129

   20 QualifiedName: Name . '.' IDENTIFIER
   96 InstantiationExpr: NEW Name . '(' ArgListOpt ')'

    '('  shift, and go to state 174
    '.'  shift, and go to state 41


State 130

   87 Primary: '(' Expr . ')'

    ')'  shift, and go to state 175


State 131

   22 VarDecls: VarDecls . ',' VarDeclarator
   50 LocalVarDecl: Type VarDecls .

    ','  shift, and go to state 54

    $default  reduce using rule 50 (LocalVarDecl)


State 132

   21 VarDecls: VarDeclarator .
   24 VarDeclarator: VarDeclarator . '[' ']'
  133 Assignment: Type VarDeclarator . AssignOp Expr

    INCREMENT  shift, and go to state 140
    DECREMENT  shift, and go to state 141
    '='        shift, and go to state 142
    '['        shift, and go to state 57

    $default  reduce using rule 21 (VarDecls)

    AssignOp  go to state 176


State 133

  100 MethodCall: Name '(' . ArgListOpt ')'

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    $default  reduce using rule 41 (ArgListOpt)

    Type           go to state 113
    Name           go to state 114
    QualifiedName  go to state 24
    ArgListOpt     go to state 177
    Primary        go to state 116
    Literal        go to state 93
    ArgList        go to state 178
    FieldAccess    go to state 95
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 124
    CondOrExpr     go to state 125
    Expr           go to state 179
    Assignment     go to state 127
    LeftHandSide   go to state 98


State 134

  101 MethodCall: Name '{' . ArgListOpt '}'

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    $default  reduce using rule 41 (ArgListOpt)

    Type           go to state 113
    Name           go to state 114
    QualifiedName  go to state 24
    ArgListOpt     go to state 180
    Primary        go to state 116
    Literal        go to state 93
    ArgList        go to state 178
    FieldAccess    go to state 95
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 124
    CondOrExpr     go to state 125
    Expr           go to state 179
    Assignment     go to state 127
    LeftHandSide   go to state 98


State 135

   42 Block: '{' BlockStmtsOpt '}' .

    $default  reduce using rule 42 (Block)


State 136

   46 BlockStmts: BlockStmts BlockStmt .

    $default  reduce using rule 46 (BlockStmts)


State 137

   49 LocalVarDeclStmt: LocalVarDecl ';' .

    $default  reduce using rule 49 (LocalVarDeclStmt)


State 138

   61 ExprStmt: StmtExpr ';' .

    $default  reduce using rule 61 (ExprStmt)


State 139

   99 FieldAccess: Primary '.' . IDENTIFIER
  102 MethodCall: Primary '.' . IDENTIFIER '(' ArgListOpt ')'
  103           | Primary '.' . IDENTIFIER '{' ArgListOpt '}'

    IDENTIFIER  shift, and go to state 181


State 140

  137 AssignOp: INCREMENT .

    $default  reduce using rule 137 (AssignOp)


State 141

  138 AssignOp: DECREMENT .

    $default  reduce using rule 138 (AssignOp)


State 142

  136 AssignOp: '=' .

    $default  reduce using rule 136 (AssignOp)


State 143

  131 Assignment: LeftHandSide AssignOp . Expr
  132           | LeftHandSide AssignOp .

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    $default  reduce using rule 132 (Assignment)

    Type           go to state 113
    Name           go to state 114
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 95
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 124
    CondOrExpr     go to state 125
    Expr           go to state 182
    Assignment     go to state 127
    LeftHandSide   go to state 98


State 144

   36 FormalParmList: FormalParmList ',' FormalParm .

    $default  reduce using rule 36 (FormalParmList)


State 145

   11 FieldDeclAssign: Type VarDeclarator '=' Literal ';' .

    $default  reduce using rule 11 (FieldDeclAssign)


State 146

   32 MethodDeclarator: IDENTIFIER '(' FormalParmListOpt ')' .

    $default  reduce using rule 32 (MethodDeclarator)


State 147

   84 BreakStmt: BREAK IDENTIFIER ';' .

    $default  reduce using rule 84 (BreakStmt)


State 148

   75 ForInit: LocalVarDecl .

    $default  reduce using rule 75 (ForInit)


State 149

   81 StmtExprList: StmtExpr .

    $default  reduce using rule 81 (StmtExprList)


State 150

   73 ForStmt: FOR '(' ForInit . ';' ExprOpt ';' ForUpdate ')' Block

    ';'  shift, and go to state 183


State 151

   74 ForInit: StmtExprList .
   82 StmtExprList: StmtExprList . ',' StmtExpr

    ','  shift, and go to state 184

    $default  reduce using rule 74 (ForInit)


State 152

   65 IfThenStmt: IF '(' Expr . ')' Block
   66 IfThenElseStmt: IF '(' Expr . ')' Block ELSE Block
   67 IfThenElseIfStmt: IF '(' Expr . ')' Block ElseIfSequence
   68                 | IF '(' Expr . ')' Block ElseIfSequence ELSE Block

    ')'  shift, and go to state 185


State 153

   20 QualifiedName: Name . '.' IDENTIFIER
  100 MethodCall: Name . '(' ArgListOpt ')'
  101           | Name . '{' ArgListOpt '}'
  105 PostFixExpr: Name .

    '('  shift, and go to state 133
    '.'  shift, and go to state 41
    '{'  shift, and go to state 134

    $default  reduce using rule 105 (PostFixExpr)


State 154

   88 Primary: FieldAccess .

    $default  reduce using rule 88 (Primary)


State 155

  106 UnaryExpr: '-' UnaryExpr .

    $default  reduce using rule 106 (UnaryExpr)


State 156

  107 UnaryExpr: '!' UnaryExpr .

    $default  reduce using rule 107 (UnaryExpr)


State 157

   24 VarDeclarator: VarDeclarator . '[' ']'
  133 Assignment: Type VarDeclarator . AssignOp Expr

    INCREMENT  shift, and go to state 140
    DECREMENT  shift, and go to state 141
    '='        shift, and go to state 142
    '['        shift, and go to state 57

    AssignOp  go to state 176


State 158

   85 ReturnStmt: RETURN ExprOpt ';' .

    $default  reduce using rule 85 (ReturnStmt)


State 159

  110 MulExpr: MulExpr '*' . UnaryExpr

    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Name           go to state 153
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 154
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 186


State 160

  111 MulExpr: MulExpr '/' . UnaryExpr

    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Name           go to state 153
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 154
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 187


State 161

  112 MulExpr: MulExpr '%' . UnaryExpr

    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Name           go to state 153
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 154
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 188


State 162

  114 AddExpr: AddExpr '+' . MulExpr

    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Name           go to state 153
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 154
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 189


State 163

  115 AddExpr: AddExpr '-' . MulExpr

    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Name           go to state 153
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 154
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 190


State 164

  116 RelOp: LESS_EQUAL .

    $default  reduce using rule 116 (RelOp)


State 165

  117 RelOp: GREATER_EQUAL .

    $default  reduce using rule 117 (RelOp)


State 166

  118 RelOp: '<' .

    $default  reduce using rule 118 (RelOp)


State 167

  119 RelOp: '>' .

    $default  reduce using rule 119 (RelOp)


State 168

  121 RelExpr: RelExpr RelOp . AddExpr

    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Name           go to state 153
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 154
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 191


State 169

  123 EqExpr: EqExpr EQUAL . RelExpr

    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Name           go to state 153
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 154
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 192


State 170

  124 EqExpr: EqExpr NOT_EQUAL . RelExpr

    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Name           go to state 153
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 154
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 193


State 171

  126 CondAndExpr: CondAndExpr LOGIC_AND . EqExpr

    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Name           go to state 153
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 154
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 194


State 172

  128 CondOrExpr: CondOrExpr LOGIC_OR . CondAndExpr

    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Name           go to state 153
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 154
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 195


State 173

   72 WhileStmt: WHILE '(' Expr . ')' Stmt

    ')'  shift, and go to state 196


State 174

   96 InstantiationExpr: NEW Name '(' . ArgListOpt ')'

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    $default  reduce using rule 41 (ArgListOpt)

    Type           go to state 113
    Name           go to state 114
    QualifiedName  go to state 24
    ArgListOpt     go to state 197
    Primary        go to state 116
    Literal        go to state 93
    ArgList        go to state 178
    FieldAccess    go to state 95
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 124
    CondOrExpr     go to state 125
    Expr           go to state 179
    Assignment     go to state 127
    LeftHandSide   go to state 98


State 175

   87 Primary: '(' Expr ')' .

    $default  reduce using rule 87 (Primary)


State 176

  133 Assignment: Type VarDeclarator AssignOp . Expr

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Type           go to state 113
    Name           go to state 114
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 95
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 124
    CondOrExpr     go to state 125
    Expr           go to state 198
    Assignment     go to state 127
    LeftHandSide   go to state 98


State 177

  100 MethodCall: Name '(' ArgListOpt . ')'

    ')'  shift, and go to state 199


State 178

   40 ArgListOpt: ArgList .
   98 ArgList: ArgList . ',' Expr

    ','  shift, and go to state 200

    $default  reduce using rule 40 (ArgListOpt)


State 179

   97 ArgList: Expr .

    $default  reduce using rule 97 (ArgList)


State 180

  101 MethodCall: Name '{' ArgListOpt . '}'

    '}'  shift, and go to state 201


State 181

   99 FieldAccess: Primary '.' IDENTIFIER .
  102 MethodCall: Primary '.' IDENTIFIER . '(' ArgListOpt ')'
  103           | Primary '.' IDENTIFIER . '{' ArgListOpt '}'

    '('  shift, and go to state 202
    '{'  shift, and go to state 203

    $default  reduce using rule 99 (FieldAccess)


State 182

  131 Assignment: LeftHandSide AssignOp Expr .

    $default  reduce using rule 131 (Assignment)


State 183

   73 ForStmt: FOR '(' ForInit ';' . ExprOpt ';' ForUpdate ')' Block

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    $default  reduce using rule 78 (ExprOpt)

    Type           go to state 113
    Name           go to state 114
    QualifiedName  go to state 24
    ExprOpt        go to state 204
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 95
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 124
    CondOrExpr     go to state 125
    Expr           go to state 126
    Assignment     go to state 127
    LeftHandSide   go to state 98


State 184

   82 StmtExprList: StmtExprList ',' . StmtExpr

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    NEW                shift, and go to state 65
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '('                shift, and go to state 72

    Type               go to state 113
    Name               go to state 75
    QualifiedName      go to state 24
    StmtExpr           go to state 205
    Primary            go to state 92
    Literal            go to state 93
    InstantiationExpr  go to state 94
    FieldAccess        go to state 95
    MethodCall         go to state 96
    Assignment         go to state 97
    LeftHandSide       go to state 98


State 185

   65 IfThenStmt: IF '(' Expr ')' . Block
   66 IfThenElseStmt: IF '(' Expr ')' . Block ELSE Block
   67 IfThenElseIfStmt: IF '(' Expr ')' . Block ElseIfSequence
   68                 | IF '(' Expr ')' . Block ElseIfSequence ELSE Block

    '{'  shift, and go to state 44

    Block  go to state 206


State 186

  110 MulExpr: MulExpr '*' UnaryExpr .

    $default  reduce using rule 110 (MulExpr)


State 187

  111 MulExpr: MulExpr '/' UnaryExpr .

    $default  reduce using rule 111 (MulExpr)


State 188

  112 MulExpr: MulExpr '%' UnaryExpr .

    $default  reduce using rule 112 (MulExpr)


State 189

  110 MulExpr: MulExpr . '*' UnaryExpr
  111        | MulExpr . '/' UnaryExpr
  112        | MulExpr . '%' UnaryExpr
  114 AddExpr: AddExpr '+' MulExpr .

    '*'  shift, and go to state 159
    '/'  shift, and go to state 160
    '%'  shift, and go to state 161

    $default  reduce using rule 114 (AddExpr)


State 190

  110 MulExpr: MulExpr . '*' UnaryExpr
  111        | MulExpr . '/' UnaryExpr
  112        | MulExpr . '%' UnaryExpr
  115 AddExpr: AddExpr '-' MulExpr .

    '*'  shift, and go to state 159
    '/'  shift, and go to state 160
    '%'  shift, and go to state 161

    $default  reduce using rule 115 (AddExpr)


State 191

  114 AddExpr: AddExpr . '+' MulExpr
  115        | AddExpr . '-' MulExpr
  121 RelExpr: RelExpr RelOp AddExpr .

    '+'  shift, and go to state 162
    '-'  shift, and go to state 163

    $default  reduce using rule 121 (RelExpr)


State 192

  121 RelExpr: RelExpr . RelOp AddExpr
  123 EqExpr: EqExpr EQUAL RelExpr .

    LESS_EQUAL     shift, and go to state 164
    GREATER_EQUAL  shift, and go to state 165
    '<'            shift, and go to state 166
    '>'            shift, and go to state 167

    $default  reduce using rule 123 (EqExpr)

    RelOp  go to state 168


State 193

  121 RelExpr: RelExpr . RelOp AddExpr
  124 EqExpr: EqExpr NOT_EQUAL RelExpr .

    LESS_EQUAL     shift, and go to state 164
    GREATER_EQUAL  shift, and go to state 165
    '<'            shift, and go to state 166
    '>'            shift, and go to state 167

    $default  reduce using rule 124 (EqExpr)

    RelOp  go to state 168


State 194

  123 EqExpr: EqExpr . EQUAL RelExpr
  124       | EqExpr . NOT_EQUAL RelExpr
  126 CondAndExpr: CondAndExpr LOGIC_AND EqExpr .

    EQUAL      shift, and go to state 169
    NOT_EQUAL  shift, and go to state 170

    $default  reduce using rule 126 (CondAndExpr)


State 195

  126 CondAndExpr: CondAndExpr . LOGIC_AND EqExpr
  128 CondOrExpr: CondOrExpr LOGIC_OR CondAndExpr .

    LOGIC_AND  shift, and go to state 171

    $default  reduce using rule 128 (CondOrExpr)


State 196

   72 WhileStmt: WHILE '(' Expr ')' . Stmt

    BREAK              shift, and go to state 60
    DOUBLE             shift, and go to state 8
    FOR                shift, and go to state 61
    IF                 shift, and go to state 62
    INT                shift, and go to state 9
    RETURN             shift, and go to state 63
    WHILE              shift, and go to state 64
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    NEW                shift, and go to state 65
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '('                shift, and go to state 72
    ';'                shift, and go to state 73
    '{'                shift, and go to state 44

    Type               go to state 113
    Name               go to state 75
    QualifiedName      go to state 24
    Block              go to state 76
    Stmt               go to state 207
    ExprStmt           go to state 83
    StmtExpr           go to state 84
    IfThenStmt         go to state 85
    IfThenElseStmt     go to state 86
    IfThenElseIfStmt   go to state 87
    WhileStmt          go to state 88
    ForStmt            go to state 89
    BreakStmt          go to state 90
    ReturnStmt         go to state 91
    Primary            go to state 92
    Literal            go to state 93
    InstantiationExpr  go to state 94
    FieldAccess        go to state 95
    MethodCall         go to state 96
    Assignment         go to state 97
    LeftHandSide       go to state 98


State 197

   96 InstantiationExpr: NEW Name '(' ArgListOpt . ')'

    ')'  shift, and go to state 208


State 198

  133 Assignment: Type VarDeclarator AssignOp Expr .

    $default  reduce using rule 133 (Assignment)


State 199

  100 MethodCall: Name '(' ArgListOpt ')' .

    $default  reduce using rule 100 (MethodCall)


State 200

   98 ArgList: ArgList ',' . Expr

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Type           go to state 113
    Name           go to state 114
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 95
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 124
    CondOrExpr     go to state 125
    Expr           go to state 209
    Assignment     go to state 127
    LeftHandSide   go to state 98


State 201

  101 MethodCall: Name '{' ArgListOpt '}' .

    $default  reduce using rule 101 (MethodCall)


State 202

  102 MethodCall: Primary '.' IDENTIFIER '(' . ArgListOpt ')'

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    $default  reduce using rule 41 (ArgListOpt)

    Type           go to state 113
    Name           go to state 114
    QualifiedName  go to state 24
    ArgListOpt     go to state 210
    Primary        go to state 116
    Literal        go to state 93
    ArgList        go to state 178
    FieldAccess    go to state 95
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 124
    CondOrExpr     go to state 125
    Expr           go to state 179
    Assignment     go to state 127
    LeftHandSide   go to state 98


State 203

  103 MethodCall: Primary '.' IDENTIFIER '{' . ArgListOpt '}'

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    $default  reduce using rule 41 (ArgListOpt)

    Type           go to state 113
    Name           go to state 114
    QualifiedName  go to state 24
    ArgListOpt     go to state 211
    Primary        go to state 116
    Literal        go to state 93
    ArgList        go to state 178
    FieldAccess    go to state 95
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 124
    CondOrExpr     go to state 125
    Expr           go to state 179
    Assignment     go to state 127
    LeftHandSide   go to state 98


State 204

   73 ForStmt: FOR '(' ForInit ';' ExprOpt . ';' ForUpdate ')' Block

    ';'  shift, and go to state 212


State 205

   82 StmtExprList: StmtExprList ',' StmtExpr .

    $default  reduce using rule 82 (StmtExprList)


State 206

   65 IfThenStmt: IF '(' Expr ')' Block .
   66 IfThenElseStmt: IF '(' Expr ')' Block . ELSE Block
   67 IfThenElseIfStmt: IF '(' Expr ')' Block . ElseIfSequence
   68                 | IF '(' Expr ')' Block . ElseIfSequence ELSE Block

    ELSE  shift, and go to state 213

    $default  reduce using rule 65 (IfThenStmt)

    ElseIfSequence  go to state 214
    ElseIfStmt      go to state 215


State 207

   72 WhileStmt: WHILE '(' Expr ')' Stmt .

    $default  reduce using rule 72 (WhileStmt)


State 208

   96 InstantiationExpr: NEW Name '(' ArgListOpt ')' .

    $default  reduce using rule 96 (InstantiationExpr)


State 209

   98 ArgList: ArgList ',' Expr .

    $default  reduce using rule 98 (ArgList)


State 210

  102 MethodCall: Primary '.' IDENTIFIER '(' ArgListOpt . ')'

    ')'  shift, and go to state 216


State 211

  103 MethodCall: Primary '.' IDENTIFIER '{' ArgListOpt . '}'

    '}'  shift, and go to state 217


State 212

   73 ForStmt: FOR '(' ForInit ';' ExprOpt ';' . ForUpdate ')' Block

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    NEW                shift, and go to state 65
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '('                shift, and go to state 72

    $default  reduce using rule 80 (ForUpdate)

    Type               go to state 113
    Name               go to state 75
    QualifiedName      go to state 24
    StmtExpr           go to state 149
    ForUpdate          go to state 218
    StmtExprList       go to state 219
    Primary            go to state 92
    Literal            go to state 93
    InstantiationExpr  go to state 94
    FieldAccess        go to state 95
    MethodCall         go to state 96
    Assignment         go to state 97
    LeftHandSide       go to state 98


State 213

   66 IfThenElseStmt: IF '(' Expr ')' Block ELSE . Block
   71 ElseIfStmt: ELSE . IfThenStmt

    IF   shift, and go to state 220
    '{'  shift, and go to state 44

    Block       go to state 221
    IfThenStmt  go to state 222


State 214

   67 IfThenElseIfStmt: IF '(' Expr ')' Block ElseIfSequence .
   68                 | IF '(' Expr ')' Block ElseIfSequence . ELSE Block
   70 ElseIfSequence: ElseIfSequence . ElseIfStmt

    ELSE  shift, and go to state 223

    $default  reduce using rule 67 (IfThenElseIfStmt)

    ElseIfStmt  go to state 224


State 215

   69 ElseIfSequence: ElseIfStmt .

    $default  reduce using rule 69 (ElseIfSequence)


State 216

  102 MethodCall: Primary '.' IDENTIFIER '(' ArgListOpt ')' .

    $default  reduce using rule 102 (MethodCall)


State 217

  103 MethodCall: Primary '.' IDENTIFIER '{' ArgListOpt '}' .

    $default  reduce using rule 103 (MethodCall)


State 218

   73 ForStmt: FOR '(' ForInit ';' ExprOpt ';' ForUpdate . ')' Block

    ')'  shift, and go to state 225


State 219

   79 ForUpdate: StmtExprList .
   82 StmtExprList: StmtExprList . ',' StmtExpr

    ','  shift, and go to state 184

    $default  reduce using rule 79 (ForUpdate)


State 220

   65 IfThenStmt: IF . '(' Expr ')' Block

    '('  shift, and go to state 226


State 221

   66 IfThenElseStmt: IF '(' Expr ')' Block ELSE Block .

    $default  reduce using rule 66 (IfThenElseStmt)


State 222

   71 ElseIfStmt: ELSE IfThenStmt .

    $default  reduce using rule 71 (ElseIfStmt)


State 223

   68 IfThenElseIfStmt: IF '(' Expr ')' Block ElseIfSequence ELSE . Block
   71 ElseIfStmt: ELSE . IfThenStmt

    IF   shift, and go to state 220
    '{'  shift, and go to state 44

    Block       go to state 227
    IfThenStmt  go to state 222


State 224

   70 ElseIfSequence: ElseIfSequence ElseIfStmt .

    $default  reduce using rule 70 (ElseIfSequence)


State 225

   73 ForStmt: FOR '(' ForInit ';' ExprOpt ';' ForUpdate ')' . Block

    '{'  shift, and go to state 44

    Block  go to state 228


State 226

   65 IfThenStmt: IF '(' . Expr ')' Block

    DOUBLE             shift, and go to state 8
    INT                shift, and go to state 9
    STRING             shift, and go to state 11
    BOOLEAN            shift, and go to state 12
    CHAR               shift, and go to state 13
    IDENTIFIER         shift, and go to state 31
    INTEGER_LITERAL    shift, and go to state 66
    FLOAT_LITERAL      shift, and go to state 67
    STRING_LITERAL     shift, and go to state 68
    BOOLEAN_LITERAL    shift, and go to state 69
    NULLVAL            shift, and go to state 70
    CHARACTER_LITERAL  shift, and go to state 71
    '-'                shift, and go to state 111
    '!'                shift, and go to state 112
    '('                shift, and go to state 72

    Type           go to state 113
    Name           go to state 114
    QualifiedName  go to state 24
    Primary        go to state 116
    Literal        go to state 93
    FieldAccess    go to state 95
    MethodCall     go to state 117
    PostFixExpr    go to state 118
    UnaryExpr      go to state 119
    MulExpr        go to state 120
    AddExpr        go to state 121
    RelExpr        go to state 122
    EqExpr         go to state 123
    CondAndExpr    go to state 124
    CondOrExpr     go to state 125
    Expr           go to state 229
    Assignment     go to state 127
    LeftHandSide   go to state 98


State 227

   68 IfThenElseIfStmt: IF '(' Expr ')' Block ElseIfSequence ELSE Block .

    $default  reduce using rule 68 (IfThenElseIfStmt)


State 228

   73 ForStmt: FOR '(' ForInit ';' ExprOpt ';' ForUpdate ')' Block .

    $default  reduce using rule 73 (ForStmt)


State 229

   65 IfThenStmt: IF '(' Expr . ')' Block

    ')'  shift, and go to state 230


State 230

   65 IfThenStmt: IF '(' Expr ')' . Block

    '{'  shift, and go to state 44

    Block  go to state 231


State 231

   65 IfThenStmt: IF '(' Expr ')' Block .

    $default  reduce using rule 65 (IfThenStmt)
